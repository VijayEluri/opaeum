package org.opaeum.reverse.popup.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Map;
import java.util.Map.Entry;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.ITypeBinding;
import org.eclipse.uml2.uml.AggregationKind;
import org.eclipse.uml2.uml.Classifier;
import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.Profile;
import org.eclipse.uml2.uml.Property;
import org.opaeum.linkage.MappedTypeLoader;

public class ProfileGenerator extends AbstractUmlGenerator{
	public void generateUml(Map<ITypeBinding,AbstractTypeDeclaration> selection,Package library,IProgressMonitor m) throws Exception{
		m.beginTask("Import Java Annotations in Profile", selection.size());
		if(library instanceof Profile){
			IFile ifile = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(library.eResource().getURI().toPlatformString(true)));
			String absolutePath = ifile.getLocation().toFile().getAbsolutePath();
			File mappedTypesFile = new File(absolutePath.substring(0, absolutePath.length() - 3) + MappedTypeLoader.MAPPINGS_EXTENSION);
			factory = new ClassifierFactory(library);
			if(mappedTypesFile.exists()){
				factory.getMappedTypes().load(new FileInputStream(mappedTypesFile));
			}
			for(Entry<ITypeBinding,AbstractTypeDeclaration> t:selection.entrySet()){
				m.worked(1);
				if(!m.isCanceled() && shouldReverseType(t.getKey())){
					Classifier cls = factory.getClassifierFor(t.getKey());
					factory.getMappedTypes().put(cls.getQualifiedName(), t.getKey().getQualifiedName());
					populateAttributes(library, cls,t);
					populateOperations(library, cls, t);
				}
			}
			factory.getMappedTypes().store(new FileOutputStream(mappedTypesFile), "Generated by NakedUml");
		}
		m.done();
	}
	@Override
	protected Property createAttribute(Classifier cls,PropertyDescriptor pd){
		Property attr = super.createAttribute(cls, pd);
		if(pd.getBaseType().isAnnotation()){
			attr.setAggregation(AggregationKind.COMPOSITE_LITERAL);
		}
		return attr;
	}
	protected boolean shouldReverseType(ITypeBinding t){
		return t.isAnnotation() || t.isEnum();
	}

}
