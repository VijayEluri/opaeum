/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.nakeduml.uim.modeleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.nakeduml.uim.util.UIMAdapterFactory;
import org.topcased.modeler.providers.ILabelFeatureProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class UIMModelerProviderAdapterFactory extends UIMAdapterFactory implements ComposeableAdapterFactory,IChangeNotifier,IDisposable{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMForm} instances.
	 * 
	 * @generated
	 */
	private UIMFormModelerProvider uimformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UserInteractionModel} instances.
	 * 
	 * @generated
	 */
	private UserInteractionModelModelerProvider userinteractionmodelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.AbstractFormFolder} instances.
	 * 
	 * @generated
	 */
	private AbstractFormFolderModelerProvider abstractformfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.AbstractFolder} instances.
	 * 
	 * @generated
	 */
	private AbstractFolderModelerProvider abstractfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMField} instances.
	 * 
	 * @generated
	 */
	private UIMFieldModelerProvider uimfieldModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMNavigation} instances.
	 * 
	 * @generated
	 */
	private UIMNavigationModelerProvider uimnavigationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMPanel} instances.
	 * 
	 * @generated
	 */
	private UIMPanelModelerProvider uimpanelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ClassForm} instances.
	 * 
	 * @generated
	 */
	private ClassFormModelerProvider classformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.StateForm} instances.
	 * 
	 * @generated
	 */
	private StateFormModelerProvider stateformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ModelSecurityConstraint} instances.
	 * 
	 * @generated
	 */
	private ModelSecurityConstraintModelerProvider modelsecurityconstraintModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.OperationInvocationForm} instances.
	 * 
	 * @generated
	 */
	private OperationInvocationFormModelerProvider operationinvocationformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMComponent} instances.
	 * 
	 * @generated
	 */
	private UIMComponentModelerProvider uimcomponentModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UserInteractionElement} instances.
	 * 
	 * @generated
	 */
	private UserInteractionElementModelerProvider userinteractionelementModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.OperationAction} instances.
	 * 
	 * @generated
	 */
	private OperationActionModelerProvider operationactionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.NavigationToOperation} instances.
	 * 
	 * @generated
	 */
	private NavigationToOperationModelerProvider navigationtooperationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.BuiltInAction} instances.
	 * 
	 * @generated
	 */
	private BuiltInActionModelerProvider builtinactionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMControl} instances.
	 * 
	 * @generated
	 */
	private UIMControlModelerProvider uimcontrolModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.NavigationToEntity} instances.
	 * 
	 * @generated
	 */
	private NavigationToEntityModelerProvider navigationtoentityModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.TransitionAction} instances.
	 * 
	 * @generated
	 */
	private TransitionActionModelerProvider transitionactionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.OperationTaskForm} instances.
	 * 
	 * @generated
	 */
	private OperationTaskFormModelerProvider operationtaskformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ActionTaskForm} instances.
	 * 
	 * @generated
	 */
	private ActionTaskFormModelerProvider actiontaskformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMAction} instances.
	 * 
	 * @generated
	 */
	private UIMActionModelerProvider uimactionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ChildSecurityConstraint} instances.
	 * 
	 * @generated
	 */
	private ChildSecurityConstraintModelerProvider childsecurityconstraintModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMGridLayout} instances.
	 * 
	 * @generated
	 */
	private UIMGridLayoutModelerProvider uimgridlayoutModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMDataTable} instances.
	 * 
	 * @generated
	 */
	private UIMDataTableModelerProvider uimdatatableModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMBinding} instances.
	 * 
	 * @generated
	 */
	private UIMBindingModelerProvider uimbindingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.PropertyRef} instances.
	 * 
	 * @generated
	 */
	private PropertyRefModelerProvider propertyrefModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMDataColumn} instances.
	 * 
	 * @generated
	 */
	private UIMDataColumnModelerProvider uimdatacolumnModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.TableBinding} instances.
	 * 
	 * @generated
	 */
	private TableBindingModelerProvider tablebindingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.FieldBinding} instances.
	 * 
	 * @generated
	 */
	private FieldBindingModelerProvider fieldbindingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.FormPanel} instances.
	 * 
	 * @generated
	 */
	private FormPanelModelerProvider formpanelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.StateMachineFolder} instances.
	 * 
	 * @generated
	 */
	private StateMachineFolderModelerProvider statemachinefolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.EntityFolder} instances.
	 * 
	 * @generated
	 */
	private EntityFolderModelerProvider entityfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ActivityFolder} instances.
	 * 
	 * @generated
	 */
	private ActivityFolderModelerProvider activityfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.OperationContainingFolder} instances.
	 * 
	 * @generated
	 */
	private OperationContainingFolderModelerProvider operationcontainingfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.NavigationBinding} instances.
	 * 
	 * @generated
	 */
	private NavigationBindingModelerProvider navigationbindingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.DetailPanel} instances.
	 * 
	 * @generated
	 */
	private DetailPanelModelerProvider detailpanelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.PackageFolder} instances.
	 * 
	 * @generated
	 */
	private PackageFolderModelerProvider packagefolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMTabPanel} instances.
	 * 
	 * @generated
	 */
	private UIMTabPanelModelerProvider uimtabpanelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMTab} instances.
	 * 
	 * @generated
	 */
	private UIMTabModelerProvider uimtabModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMCheckBox} instances.
	 * 
	 * @generated
	 */
	private UIMCheckBoxModelerProvider uimcheckboxModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMLookup} instances.
	 * 
	 * @generated
	 */
	private UIMLookupModelerProvider uimlookupModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.LookupBinding} instances.
	 * 
	 * @generated
	 */
	private LookupBindingModelerProvider lookupbindingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMText} instances.
	 * 
	 * @generated
	 */
	private UIMTextModelerProvider uimtextModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMTextArea} instances.
	 * 
	 * @generated
	 */
	private UIMTextAreaModelerProvider uimtextareaModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMDropdown} instances.
	 * 
	 * @generated
	 */
	private UIMDropdownModelerProvider uimdropdownModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMDatePopup} instances.
	 * 
	 * @generated
	 */
	private UIMDatePopupModelerProvider uimdatepopupModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMSingleSelectListBox} instances.
	 * 
	 * @generated
	 */
	private UIMSingleSelectListBoxModelerProvider uimsingleselectlistboxModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMContainer} instances.
	 * 
	 * @generated
	 */
	private UIMContainerModelerProvider uimcontainerModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMSingleSelectTreeView} instances.
	 * 
	 * @generated
	 */
	private UIMSingleSelectTreeViewModelerProvider uimsingleselecttreeviewModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.MasterComponent} instances.
	 * 
	 * @generated
	 */
	private MasterComponentModelerProvider mastercomponentModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMLayout} instances.
	 * 
	 * @generated
	 */
	private UIMLayoutModelerProvider uimlayoutModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMToolbarLayout} instances.
	 * 
	 * @generated
	 */
	private UIMToolbarLayoutModelerProvider uimtoolbarlayoutModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMBorderLayout} instances.
	 * 
	 * @generated
	 */
	private UIMBorderLayoutModelerProvider uimborderlayoutModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMXYLayout} instances.
	 * 
	 * @generated
	 */
	private UIMXYLayoutModelerProvider uimxylayoutModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMMultiSelectTreeView} instances.
	 * 
	 * @generated
	 */
	private UIMMultiSelectTreeViewModelerProvider uimmultiselecttreeviewModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMMultiSelectListBox} instances.
	 * 
	 * @generated
	 */
	private UIMMultiSelectListBoxModelerProvider uimmultiselectlistboxModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMMultiSelectPopupSearch} instances.
	 * 
	 * @generated
	 */
	private UIMMultiSelectPopupSearchModelerProvider uimmultiselectpopupsearchModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMSingleSelectPopupSearch} instances.
	 * 
	 * @generated
	 */
	private UIMSingleSelectPopupSearchModelerProvider uimsingleselectpopupsearchModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMToggleButton} instances.
	 * 
	 * @generated
	 */
	private UIMToggleButtonModelerProvider uimtogglebuttonModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UIMNumberScroller} instances.
	 * 
	 * @generated
	 */
	private UIMNumberScrollerModelerProvider uimnumberscrollerModelerProvider;
	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public UIMModelerProviderAdapterFactory(){
		supportedTypes.add(ILabelFeatureProvider.class);
	}
	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory(){
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}
	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory){
		this.parentAdapterFactory = parentAdapterFactory;
	}
	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type){
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}
	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier,Object type){
		return super.adapt(notifier, this);
	}
	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object,Object type){
		if(isFactoryForType(type)){
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class) || (((Class) type).isInstance(adapter))){
				return adapter;
			}
		}
		return null;
	}
	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.addListener(notifyChangedListener);
	}
	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.removeListener(notifyChangedListener);
	}
	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification){
		changeNotifier.fireNotifyChanged(notification);
		if(parentAdapterFactory != null){
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMFormAdapter(){
		if(uimformModelerProvider == null){
			uimformModelerProvider = new UIMFormModelerProvider(this);
		}
		return uimformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UserInteractionModel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUserInteractionModelAdapter(){
		if(userinteractionmodelModelerProvider == null){
			userinteractionmodelModelerProvider = new UserInteractionModelModelerProvider(this);
		}
		return userinteractionmodelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.AbstractFormFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAbstractFormFolderAdapter(){
		if(abstractformfolderModelerProvider == null){
			abstractformfolderModelerProvider = new AbstractFormFolderModelerProvider(this);
		}
		return abstractformfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.AbstractFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAbstractFolderAdapter(){
		if(abstractfolderModelerProvider == null){
			abstractfolderModelerProvider = new AbstractFolderModelerProvider(this);
		}
		return abstractfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMField}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMFieldAdapter(){
		if(uimfieldModelerProvider == null){
			uimfieldModelerProvider = new UIMFieldModelerProvider(this);
		}
		return uimfieldModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMNavigation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMNavigationAdapter(){
		if(uimnavigationModelerProvider == null){
			uimnavigationModelerProvider = new UIMNavigationModelerProvider(this);
		}
		return uimnavigationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMPanel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMPanelAdapter(){
		if(uimpanelModelerProvider == null){
			uimpanelModelerProvider = new UIMPanelModelerProvider(this);
		}
		return uimpanelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ClassForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createClassFormAdapter(){
		if(classformModelerProvider == null){
			classformModelerProvider = new ClassFormModelerProvider(this);
		}
		return classformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.StateForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStateFormAdapter(){
		if(stateformModelerProvider == null){
			stateformModelerProvider = new StateFormModelerProvider(this);
		}
		return stateformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ModelSecurityConstraint}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createModelSecurityConstraintAdapter(){
		if(modelsecurityconstraintModelerProvider == null){
			modelsecurityconstraintModelerProvider = new ModelSecurityConstraintModelerProvider(this);
		}
		return modelsecurityconstraintModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.OperationInvocationForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationInvocationFormAdapter(){
		if(operationinvocationformModelerProvider == null){
			operationinvocationformModelerProvider = new OperationInvocationFormModelerProvider(this);
		}
		return operationinvocationformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMComponent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMComponentAdapter(){
		if(uimcomponentModelerProvider == null){
			uimcomponentModelerProvider = new UIMComponentModelerProvider(this);
		}
		return uimcomponentModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UserInteractionElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUserInteractionElementAdapter(){
		if(userinteractionelementModelerProvider == null){
			userinteractionelementModelerProvider = new UserInteractionElementModelerProvider(this);
		}
		return userinteractionelementModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.OperationAction}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationActionAdapter(){
		if(operationactionModelerProvider == null){
			operationactionModelerProvider = new OperationActionModelerProvider(this);
		}
		return operationactionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.NavigationToOperation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createNavigationToOperationAdapter(){
		if(navigationtooperationModelerProvider == null){
			navigationtooperationModelerProvider = new NavigationToOperationModelerProvider(this);
		}
		return navigationtooperationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.BuiltInAction}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBuiltInActionAdapter(){
		if(builtinactionModelerProvider == null){
			builtinactionModelerProvider = new BuiltInActionModelerProvider(this);
		}
		return builtinactionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMControl}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMControlAdapter(){
		if(uimcontrolModelerProvider == null){
			uimcontrolModelerProvider = new UIMControlModelerProvider(this);
		}
		return uimcontrolModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.NavigationToEntity}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createNavigationToEntityAdapter(){
		if(navigationtoentityModelerProvider == null){
			navigationtoentityModelerProvider = new NavigationToEntityModelerProvider(this);
		}
		return navigationtoentityModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.TransitionAction}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTransitionActionAdapter(){
		if(transitionactionModelerProvider == null){
			transitionactionModelerProvider = new TransitionActionModelerProvider(this);
		}
		return transitionactionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.OperationTaskForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationTaskFormAdapter(){
		if(operationtaskformModelerProvider == null){
			operationtaskformModelerProvider = new OperationTaskFormModelerProvider(this);
		}
		return operationtaskformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ActionTaskForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createActionTaskFormAdapter(){
		if(actiontaskformModelerProvider == null){
			actiontaskformModelerProvider = new ActionTaskFormModelerProvider(this);
		}
		return actiontaskformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMAction}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMActionAdapter(){
		if(uimactionModelerProvider == null){
			uimactionModelerProvider = new UIMActionModelerProvider(this);
		}
		return uimactionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ChildSecurityConstraint}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createChildSecurityConstraintAdapter(){
		if(childsecurityconstraintModelerProvider == null){
			childsecurityconstraintModelerProvider = new ChildSecurityConstraintModelerProvider(this);
		}
		return childsecurityconstraintModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMGridLayout}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMGridLayoutAdapter(){
		if(uimgridlayoutModelerProvider == null){
			uimgridlayoutModelerProvider = new UIMGridLayoutModelerProvider(this);
		}
		return uimgridlayoutModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMDataTable}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMDataTableAdapter(){
		if(uimdatatableModelerProvider == null){
			uimdatatableModelerProvider = new UIMDataTableModelerProvider(this);
		}
		return uimdatatableModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMBindingAdapter(){
		if(uimbindingModelerProvider == null){
			uimbindingModelerProvider = new UIMBindingModelerProvider(this);
		}
		return uimbindingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.PropertyRef}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPropertyRefAdapter(){
		if(propertyrefModelerProvider == null){
			propertyrefModelerProvider = new PropertyRefModelerProvider(this);
		}
		return propertyrefModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMDataColumn}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMDataColumnAdapter(){
		if(uimdatacolumnModelerProvider == null){
			uimdatacolumnModelerProvider = new UIMDataColumnModelerProvider(this);
		}
		return uimdatacolumnModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.TableBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTableBindingAdapter(){
		if(tablebindingModelerProvider == null){
			tablebindingModelerProvider = new TableBindingModelerProvider(this);
		}
		return tablebindingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.FieldBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFieldBindingAdapter(){
		if(fieldbindingModelerProvider == null){
			fieldbindingModelerProvider = new FieldBindingModelerProvider(this);
		}
		return fieldbindingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.FormPanel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFormPanelAdapter(){
		if(formpanelModelerProvider == null){
			formpanelModelerProvider = new FormPanelModelerProvider(this);
		}
		return formpanelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.StateMachineFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStateMachineFolderAdapter(){
		if(statemachinefolderModelerProvider == null){
			statemachinefolderModelerProvider = new StateMachineFolderModelerProvider(this);
		}
		return statemachinefolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.EntityFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEntityFolderAdapter(){
		if(entityfolderModelerProvider == null){
			entityfolderModelerProvider = new EntityFolderModelerProvider(this);
		}
		return entityfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ActivityFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createActivityFolderAdapter(){
		if(activityfolderModelerProvider == null){
			activityfolderModelerProvider = new ActivityFolderModelerProvider(this);
		}
		return activityfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.OperationContainingFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationContainingFolderAdapter(){
		if(operationcontainingfolderModelerProvider == null){
			operationcontainingfolderModelerProvider = new OperationContainingFolderModelerProvider(this);
		}
		return operationcontainingfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.NavigationBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createNavigationBindingAdapter(){
		if(navigationbindingModelerProvider == null){
			navigationbindingModelerProvider = new NavigationBindingModelerProvider(this);
		}
		return navigationbindingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.DetailPanel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDetailPanelAdapter(){
		if(detailpanelModelerProvider == null){
			detailpanelModelerProvider = new DetailPanelModelerProvider(this);
		}
		return detailpanelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.PackageFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPackageFolderAdapter(){
		if(packagefolderModelerProvider == null){
			packagefolderModelerProvider = new PackageFolderModelerProvider(this);
		}
		return packagefolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMTabPanel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMTabPanelAdapter(){
		if(uimtabpanelModelerProvider == null){
			uimtabpanelModelerProvider = new UIMTabPanelModelerProvider(this);
		}
		return uimtabpanelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMTab}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMTabAdapter(){
		if(uimtabModelerProvider == null){
			uimtabModelerProvider = new UIMTabModelerProvider(this);
		}
		return uimtabModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMCheckBox}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMCheckBoxAdapter(){
		if(uimcheckboxModelerProvider == null){
			uimcheckboxModelerProvider = new UIMCheckBoxModelerProvider(this);
		}
		return uimcheckboxModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMLookup}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMLookupAdapter(){
		if(uimlookupModelerProvider == null){
			uimlookupModelerProvider = new UIMLookupModelerProvider(this);
		}
		return uimlookupModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.LookupBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLookupBindingAdapter(){
		if(lookupbindingModelerProvider == null){
			lookupbindingModelerProvider = new LookupBindingModelerProvider(this);
		}
		return lookupbindingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMText}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMTextAdapter(){
		if(uimtextModelerProvider == null){
			uimtextModelerProvider = new UIMTextModelerProvider(this);
		}
		return uimtextModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMTextArea}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMTextAreaAdapter(){
		if(uimtextareaModelerProvider == null){
			uimtextareaModelerProvider = new UIMTextAreaModelerProvider(this);
		}
		return uimtextareaModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMDropdown}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMDropdownAdapter(){
		if(uimdropdownModelerProvider == null){
			uimdropdownModelerProvider = new UIMDropdownModelerProvider(this);
		}
		return uimdropdownModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMDatePopup}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMDatePopupAdapter(){
		if(uimdatepopupModelerProvider == null){
			uimdatepopupModelerProvider = new UIMDatePopupModelerProvider(this);
		}
		return uimdatepopupModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMSingleSelectListBox}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMSingleSelectListBoxAdapter(){
		if(uimsingleselectlistboxModelerProvider == null){
			uimsingleselectlistboxModelerProvider = new UIMSingleSelectListBoxModelerProvider(this);
		}
		return uimsingleselectlistboxModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMContainer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMContainerAdapter(){
		if(uimcontainerModelerProvider == null){
			uimcontainerModelerProvider = new UIMContainerModelerProvider(this);
		}
		return uimcontainerModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMSingleSelectTreeView}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMSingleSelectTreeViewAdapter(){
		if(uimsingleselecttreeviewModelerProvider == null){
			uimsingleselecttreeviewModelerProvider = new UIMSingleSelectTreeViewModelerProvider(this);
		}
		return uimsingleselecttreeviewModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.MasterComponent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMasterComponentAdapter(){
		if(mastercomponentModelerProvider == null){
			mastercomponentModelerProvider = new MasterComponentModelerProvider(this);
		}
		return mastercomponentModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMLayout}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMLayoutAdapter(){
		if(uimlayoutModelerProvider == null){
			uimlayoutModelerProvider = new UIMLayoutModelerProvider(this);
		}
		return uimlayoutModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMToolbarLayout}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMToolbarLayoutAdapter(){
		if(uimtoolbarlayoutModelerProvider == null){
			uimtoolbarlayoutModelerProvider = new UIMToolbarLayoutModelerProvider(this);
		}
		return uimtoolbarlayoutModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMBorderLayout}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMBorderLayoutAdapter(){
		if(uimborderlayoutModelerProvider == null){
			uimborderlayoutModelerProvider = new UIMBorderLayoutModelerProvider(this);
		}
		return uimborderlayoutModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMXYLayout}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMXYLayoutAdapter(){
		if(uimxylayoutModelerProvider == null){
			uimxylayoutModelerProvider = new UIMXYLayoutModelerProvider(this);
		}
		return uimxylayoutModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMMultiSelectTreeView}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMMultiSelectTreeViewAdapter(){
		if(uimmultiselecttreeviewModelerProvider == null){
			uimmultiselecttreeviewModelerProvider = new UIMMultiSelectTreeViewModelerProvider(this);
		}
		return uimmultiselecttreeviewModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMMultiSelectListBox}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMMultiSelectListBoxAdapter(){
		if(uimmultiselectlistboxModelerProvider == null){
			uimmultiselectlistboxModelerProvider = new UIMMultiSelectListBoxModelerProvider(this);
		}
		return uimmultiselectlistboxModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMMultiSelectPopupSearch}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMMultiSelectPopupSearchAdapter(){
		if(uimmultiselectpopupsearchModelerProvider == null){
			uimmultiselectpopupsearchModelerProvider = new UIMMultiSelectPopupSearchModelerProvider(this);
		}
		return uimmultiselectpopupsearchModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMSingleSelectPopupSearch}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMSingleSelectPopupSearchAdapter(){
		if(uimsingleselectpopupsearchModelerProvider == null){
			uimsingleselectpopupsearchModelerProvider = new UIMSingleSelectPopupSearchModelerProvider(this);
		}
		return uimsingleselectpopupsearchModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMToggleButton}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMToggleButtonAdapter(){
		if(uimtogglebuttonModelerProvider == null){
			uimtogglebuttonModelerProvider = new UIMToggleButtonModelerProvider(this);
		}
		return uimtogglebuttonModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UIMNumberScroller}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUIMNumberScrollerAdapter(){
		if(uimnumberscrollerModelerProvider == null){
			uimnumberscrollerModelerProvider = new UIMNumberScrollerModelerProvider(this);
		}
		return uimnumberscrollerModelerProvider;
	}
	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose(){
		if(uimformModelerProvider != null){
			uimformModelerProvider.dispose();
		}
		if(userinteractionmodelModelerProvider != null){
			userinteractionmodelModelerProvider.dispose();
		}
		if(abstractformfolderModelerProvider != null){
			abstractformfolderModelerProvider.dispose();
		}
		if(abstractfolderModelerProvider != null){
			abstractfolderModelerProvider.dispose();
		}
		if(uimfieldModelerProvider != null){
			uimfieldModelerProvider.dispose();
		}
		if(uimnavigationModelerProvider != null){
			uimnavigationModelerProvider.dispose();
		}
		if(uimpanelModelerProvider != null){
			uimpanelModelerProvider.dispose();
		}
		if(classformModelerProvider != null){
			classformModelerProvider.dispose();
		}
		if(stateformModelerProvider != null){
			stateformModelerProvider.dispose();
		}
		if(modelsecurityconstraintModelerProvider != null){
			modelsecurityconstraintModelerProvider.dispose();
		}
		if(operationinvocationformModelerProvider != null){
			operationinvocationformModelerProvider.dispose();
		}
		if(uimcomponentModelerProvider != null){
			uimcomponentModelerProvider.dispose();
		}
		if(userinteractionelementModelerProvider != null){
			userinteractionelementModelerProvider.dispose();
		}
		if(operationactionModelerProvider != null){
			operationactionModelerProvider.dispose();
		}
		if(navigationtooperationModelerProvider != null){
			navigationtooperationModelerProvider.dispose();
		}
		if(builtinactionModelerProvider != null){
			builtinactionModelerProvider.dispose();
		}
		if(uimcontrolModelerProvider != null){
			uimcontrolModelerProvider.dispose();
		}
		if(navigationtoentityModelerProvider != null){
			navigationtoentityModelerProvider.dispose();
		}
		if(transitionactionModelerProvider != null){
			transitionactionModelerProvider.dispose();
		}
		if(operationtaskformModelerProvider != null){
			operationtaskformModelerProvider.dispose();
		}
		if(actiontaskformModelerProvider != null){
			actiontaskformModelerProvider.dispose();
		}
		if(uimactionModelerProvider != null){
			uimactionModelerProvider.dispose();
		}
		if(childsecurityconstraintModelerProvider != null){
			childsecurityconstraintModelerProvider.dispose();
		}
		if(uimgridlayoutModelerProvider != null){
			uimgridlayoutModelerProvider.dispose();
		}
		if(uimdatatableModelerProvider != null){
			uimdatatableModelerProvider.dispose();
		}
		if(uimbindingModelerProvider != null){
			uimbindingModelerProvider.dispose();
		}
		if(propertyrefModelerProvider != null){
			propertyrefModelerProvider.dispose();
		}
		if(uimdatacolumnModelerProvider != null){
			uimdatacolumnModelerProvider.dispose();
		}
		if(tablebindingModelerProvider != null){
			tablebindingModelerProvider.dispose();
		}
		if(fieldbindingModelerProvider != null){
			fieldbindingModelerProvider.dispose();
		}
		if(formpanelModelerProvider != null){
			formpanelModelerProvider.dispose();
		}
		if(statemachinefolderModelerProvider != null){
			statemachinefolderModelerProvider.dispose();
		}
		if(entityfolderModelerProvider != null){
			entityfolderModelerProvider.dispose();
		}
		if(activityfolderModelerProvider != null){
			activityfolderModelerProvider.dispose();
		}
		if(operationcontainingfolderModelerProvider != null){
			operationcontainingfolderModelerProvider.dispose();
		}
		if(navigationbindingModelerProvider != null){
			navigationbindingModelerProvider.dispose();
		}
		if(detailpanelModelerProvider != null){
			detailpanelModelerProvider.dispose();
		}
		if(packagefolderModelerProvider != null){
			packagefolderModelerProvider.dispose();
		}
		if(uimtabpanelModelerProvider != null){
			uimtabpanelModelerProvider.dispose();
		}
		if(uimtabModelerProvider != null){
			uimtabModelerProvider.dispose();
		}
		if(uimcheckboxModelerProvider != null){
			uimcheckboxModelerProvider.dispose();
		}
		if(uimlookupModelerProvider != null){
			uimlookupModelerProvider.dispose();
		}
		if(lookupbindingModelerProvider != null){
			lookupbindingModelerProvider.dispose();
		}
		if(uimtextModelerProvider != null){
			uimtextModelerProvider.dispose();
		}
		if(uimtextareaModelerProvider != null){
			uimtextareaModelerProvider.dispose();
		}
		if(uimdropdownModelerProvider != null){
			uimdropdownModelerProvider.dispose();
		}
		if(uimdatepopupModelerProvider != null){
			uimdatepopupModelerProvider.dispose();
		}
		if(uimsingleselectlistboxModelerProvider != null){
			uimsingleselectlistboxModelerProvider.dispose();
		}
		if(uimcontainerModelerProvider != null){
			uimcontainerModelerProvider.dispose();
		}
		if(uimsingleselecttreeviewModelerProvider != null){
			uimsingleselecttreeviewModelerProvider.dispose();
		}
		if(mastercomponentModelerProvider != null){
			mastercomponentModelerProvider.dispose();
		}
		if(uimlayoutModelerProvider != null){
			uimlayoutModelerProvider.dispose();
		}
		if(uimtoolbarlayoutModelerProvider != null){
			uimtoolbarlayoutModelerProvider.dispose();
		}
		if(uimborderlayoutModelerProvider != null){
			uimborderlayoutModelerProvider.dispose();
		}
		if(uimxylayoutModelerProvider != null){
			uimxylayoutModelerProvider.dispose();
		}
		if(uimmultiselecttreeviewModelerProvider != null){
			uimmultiselecttreeviewModelerProvider.dispose();
		}
		if(uimmultiselectlistboxModelerProvider != null){
			uimmultiselectlistboxModelerProvider.dispose();
		}
		if(uimmultiselectpopupsearchModelerProvider != null){
			uimmultiselectpopupsearchModelerProvider.dispose();
		}
		if(uimsingleselectpopupsearchModelerProvider != null){
			uimsingleselectpopupsearchModelerProvider.dispose();
		}
		if(uimtogglebuttonModelerProvider != null){
			uimtogglebuttonModelerProvider.dispose();
		}
		if(uimnumberscrollerModelerProvider != null){
			uimnumberscrollerModelerProvider.dispose();
		}
	}
}
