/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.nakeduml.uim.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.nakeduml.uim.util.UimAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UimItemProviderAdapterFactory extends UimAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UimItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimFormItemProvider uimFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimFormAdapter() {
		if (uimFormItemProvider == null) {
			uimFormItemProvider = new UimFormItemProvider(this);
		}

		return uimFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UserInteractionModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserInteractionModelItemProvider userInteractionModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UserInteractionModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserInteractionModelAdapter() {
		if (userInteractionModelItemProvider == null) {
			userInteractionModelItemProvider = new UserInteractionModelItemProvider(this);
		}

		return userInteractionModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimFieldItemProvider uimFieldItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimFieldAdapter() {
		if (uimFieldItemProvider == null) {
			uimFieldItemProvider = new UimFieldItemProvider(this);
		}

		return uimFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ClassForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassFormItemProvider classFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ClassForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassFormAdapter() {
		if (classFormItemProvider == null) {
			classFormItemProvider = new ClassFormItemProvider(this);
		}

		return classFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.StateForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateFormItemProvider stateFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.StateForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateFormAdapter() {
		if (stateFormItemProvider == null) {
			stateFormItemProvider = new StateFormItemProvider(this);
		}

		return stateFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.WorkspaceSecurityConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkspaceSecurityConstraintItemProvider workspaceSecurityConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.WorkspaceSecurityConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkspaceSecurityConstraintAdapter() {
		if (workspaceSecurityConstraintItemProvider == null) {
			workspaceSecurityConstraintItemProvider = new WorkspaceSecurityConstraintItemProvider(this);
		}

		return workspaceSecurityConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.OperationInvocationForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationInvocationFormItemProvider operationInvocationFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.OperationInvocationForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationInvocationFormAdapter() {
		if (operationInvocationFormItemProvider == null) {
			operationInvocationFormItemProvider = new OperationInvocationFormItemProvider(this);
		}

		return operationInvocationFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.OperationAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationActionItemProvider operationActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.OperationAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationActionAdapter() {
		if (operationActionItemProvider == null) {
			operationActionItemProvider = new OperationActionItemProvider(this);
		}

		return operationActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.NavigationToOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationToOperationItemProvider navigationToOperationItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.NavigationToOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationToOperationAdapter() {
		if (navigationToOperationItemProvider == null) {
			navigationToOperationItemProvider = new NavigationToOperationItemProvider(this);
		}

		return navigationToOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.BuiltInAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuiltInActionItemProvider builtInActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.BuiltInAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuiltInActionAdapter() {
		if (builtInActionItemProvider == null) {
			builtInActionItemProvider = new BuiltInActionItemProvider(this);
		}

		return builtInActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimControlItemProvider uimControlItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimControlAdapter() {
		if (uimControlItemProvider == null) {
			uimControlItemProvider = new UimControlItemProvider(this);
		}

		return uimControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.NavigationToEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationToEntityItemProvider navigationToEntityItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.NavigationToEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationToEntityAdapter() {
		if (navigationToEntityItemProvider == null) {
			navigationToEntityItemProvider = new NavigationToEntityItemProvider(this);
		}

		return navigationToEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.TransitionAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionActionItemProvider transitionActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.TransitionAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionActionAdapter() {
		if (transitionActionItemProvider == null) {
			transitionActionItemProvider = new TransitionActionItemProvider(this);
		}

		return transitionActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.OperationTaskForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationTaskFormItemProvider operationTaskFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.OperationTaskForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationTaskFormAdapter() {
		if (operationTaskFormItemProvider == null) {
			operationTaskFormItemProvider = new OperationTaskFormItemProvider(this);
		}

		return operationTaskFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ActionTaskForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionTaskFormItemProvider actionTaskFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ActionTaskForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionTaskFormAdapter() {
		if (actionTaskFormItemProvider == null) {
			actionTaskFormItemProvider = new ActionTaskFormItemProvider(this);
		}

		return actionTaskFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.SecurityConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityConstraintItemProvider securityConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.SecurityConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityConstraintAdapter() {
		if (securityConstraintItemProvider == null) {
			securityConstraintItemProvider = new SecurityConstraintItemProvider(this);
		}

		return securityConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimGridLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimGridLayoutItemProvider uimGridLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimGridLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimGridLayoutAdapter() {
		if (uimGridLayoutItemProvider == null) {
			uimGridLayoutItemProvider = new UimGridLayoutItemProvider(this);
		}

		return uimGridLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimDataTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDataTableItemProvider uimDataTableItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimDataTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDataTableAdapter() {
		if (uimDataTableItemProvider == null) {
			uimDataTableItemProvider = new UimDataTableItemProvider(this);
		}

		return uimDataTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.PropertyRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyRefItemProvider propertyRefItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.PropertyRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyRefAdapter() {
		if (propertyRefItemProvider == null) {
			propertyRefItemProvider = new PropertyRefItemProvider(this);
		}

		return propertyRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimDataColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDataColumnItemProvider uimDataColumnItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimDataColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDataColumnAdapter() {
		if (uimDataColumnItemProvider == null) {
			uimDataColumnItemProvider = new UimDataColumnItemProvider(this);
		}

		return uimDataColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.TableBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableBindingItemProvider tableBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.TableBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableBindingAdapter() {
		if (tableBindingItemProvider == null) {
			tableBindingItemProvider = new TableBindingItemProvider(this);
		}

		return tableBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.FieldBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldBindingItemProvider fieldBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.FieldBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldBindingAdapter() {
		if (fieldBindingItemProvider == null) {
			fieldBindingItemProvider = new FieldBindingItemProvider(this);
		}

		return fieldBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.FormPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormPanelItemProvider formPanelItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.FormPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormPanelAdapter() {
		if (formPanelItemProvider == null) {
			formPanelItemProvider = new FormPanelItemProvider(this);
		}

		return formPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.StateMachineFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateMachineFolderItemProvider stateMachineFolderItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.StateMachineFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateMachineFolderAdapter() {
		if (stateMachineFolderItemProvider == null) {
			stateMachineFolderItemProvider = new StateMachineFolderItemProvider(this);
		}

		return stateMachineFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.EntityFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityFolderItemProvider entityFolderItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.EntityFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityFolderAdapter() {
		if (entityFolderItemProvider == null) {
			entityFolderItemProvider = new EntityFolderItemProvider(this);
		}

		return entityFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ActivityFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFolderItemProvider activityFolderItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ActivityFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFolderAdapter() {
		if (activityFolderItemProvider == null) {
			activityFolderItemProvider = new ActivityFolderItemProvider(this);
		}

		return activityFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.NavigationBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationBindingItemProvider navigationBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.NavigationBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationBindingAdapter() {
		if (navigationBindingItemProvider == null) {
			navigationBindingItemProvider = new NavigationBindingItemProvider(this);
		}

		return navigationBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.DetailPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DetailPanelItemProvider detailPanelItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.DetailPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDetailPanelAdapter() {
		if (detailPanelItemProvider == null) {
			detailPanelItemProvider = new DetailPanelItemProvider(this);
		}

		return detailPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.PackageFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageFolderItemProvider packageFolderItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.PackageFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageFolderAdapter() {
		if (packageFolderItemProvider == null) {
			packageFolderItemProvider = new PackageFolderItemProvider(this);
		}

		return packageFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimTabPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTabPanelItemProvider uimTabPanelItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimTabPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTabPanelAdapter() {
		if (uimTabPanelItemProvider == null) {
			uimTabPanelItemProvider = new UimTabPanelItemProvider(this);
		}

		return uimTabPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimTab} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTabItemProvider uimTabItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimTab}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTabAdapter() {
		if (uimTabItemProvider == null) {
			uimTabItemProvider = new UimTabItemProvider(this);
		}

		return uimTabItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimCheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimCheckBoxItemProvider uimCheckBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimCheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimCheckBoxAdapter() {
		if (uimCheckBoxItemProvider == null) {
			uimCheckBoxItemProvider = new UimCheckBoxItemProvider(this);
		}

		return uimCheckBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimLookup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimLookupItemProvider uimLookupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimLookup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimLookupAdapter() {
		if (uimLookupItemProvider == null) {
			uimLookupItemProvider = new UimLookupItemProvider(this);
		}

		return uimLookupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.LookupBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LookupBindingItemProvider lookupBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.LookupBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLookupBindingAdapter() {
		if (lookupBindingItemProvider == null) {
			lookupBindingItemProvider = new LookupBindingItemProvider(this);
		}

		return lookupBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTextItemProvider uimTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTextAdapter() {
		if (uimTextItemProvider == null) {
			uimTextItemProvider = new UimTextItemProvider(this);
		}

		return uimTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimTextArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTextAreaItemProvider uimTextAreaItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimTextArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTextAreaAdapter() {
		if (uimTextAreaItemProvider == null) {
			uimTextAreaItemProvider = new UimTextAreaItemProvider(this);
		}

		return uimTextAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimDropdown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDropdownItemProvider uimDropdownItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimDropdown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDropdownAdapter() {
		if (uimDropdownItemProvider == null) {
			uimDropdownItemProvider = new UimDropdownItemProvider(this);
		}

		return uimDropdownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimDatePopup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDatePopupItemProvider uimDatePopupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimDatePopup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDatePopupAdapter() {
		if (uimDatePopupItemProvider == null) {
			uimDatePopupItemProvider = new UimDatePopupItemProvider(this);
		}

		return uimDatePopupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimSingleSelectListBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimSingleSelectListBoxItemProvider uimSingleSelectListBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimSingleSelectListBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimSingleSelectListBoxAdapter() {
		if (uimSingleSelectListBoxItemProvider == null) {
			uimSingleSelectListBoxItemProvider = new UimSingleSelectListBoxItemProvider(this);
		}

		return uimSingleSelectListBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimContainerItemProvider uimContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimContainerAdapter() {
		if (uimContainerItemProvider == null) {
			uimContainerItemProvider = new UimContainerItemProvider(this);
		}

		return uimContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimSingleSelectTreeView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimSingleSelectTreeViewItemProvider uimSingleSelectTreeViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimSingleSelectTreeView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimSingleSelectTreeViewAdapter() {
		if (uimSingleSelectTreeViewItemProvider == null) {
			uimSingleSelectTreeViewItemProvider = new UimSingleSelectTreeViewItemProvider(this);
		}

		return uimSingleSelectTreeViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimLayoutItemProvider uimLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimLayoutAdapter() {
		if (uimLayoutItemProvider == null) {
			uimLayoutItemProvider = new UimLayoutItemProvider(this);
		}

		return uimLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimToolbarLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimToolbarLayoutItemProvider uimToolbarLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimToolbarLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimToolbarLayoutAdapter() {
		if (uimToolbarLayoutItemProvider == null) {
			uimToolbarLayoutItemProvider = new UimToolbarLayoutItemProvider(this);
		}

		return uimToolbarLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimBorderLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimBorderLayoutItemProvider uimBorderLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimBorderLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimBorderLayoutAdapter() {
		if (uimBorderLayoutItemProvider == null) {
			uimBorderLayoutItemProvider = new UimBorderLayoutItemProvider(this);
		}

		return uimBorderLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimXYLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimXYLayoutItemProvider uimXYLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimXYLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimXYLayoutAdapter() {
		if (uimXYLayoutItemProvider == null) {
			uimXYLayoutItemProvider = new UimXYLayoutItemProvider(this);
		}

		return uimXYLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimMultiSelectTreeView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimMultiSelectTreeViewItemProvider uimMultiSelectTreeViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimMultiSelectTreeView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimMultiSelectTreeViewAdapter() {
		if (uimMultiSelectTreeViewItemProvider == null) {
			uimMultiSelectTreeViewItemProvider = new UimMultiSelectTreeViewItemProvider(this);
		}

		return uimMultiSelectTreeViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimMultiSelectListBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimMultiSelectListBoxItemProvider uimMultiSelectListBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimMultiSelectListBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimMultiSelectListBoxAdapter() {
		if (uimMultiSelectListBoxItemProvider == null) {
			uimMultiSelectListBoxItemProvider = new UimMultiSelectListBoxItemProvider(this);
		}

		return uimMultiSelectListBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimMultiSelectPopupSearch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimMultiSelectPopupSearchItemProvider uimMultiSelectPopupSearchItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimMultiSelectPopupSearch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimMultiSelectPopupSearchAdapter() {
		if (uimMultiSelectPopupSearchItemProvider == null) {
			uimMultiSelectPopupSearchItemProvider = new UimMultiSelectPopupSearchItemProvider(this);
		}

		return uimMultiSelectPopupSearchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimSingleSelectPopupSearch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimSingleSelectPopupSearchItemProvider uimSingleSelectPopupSearchItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimSingleSelectPopupSearch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimSingleSelectPopupSearchAdapter() {
		if (uimSingleSelectPopupSearchItemProvider == null) {
			uimSingleSelectPopupSearchItemProvider = new UimSingleSelectPopupSearchItemProvider(this);
		}

		return uimSingleSelectPopupSearchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimToggleButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimToggleButtonItemProvider uimToggleButtonItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimToggleButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimToggleButtonAdapter() {
		if (uimToggleButtonItemProvider == null) {
			uimToggleButtonItemProvider = new UimToggleButtonItemProvider(this);
		}

		return uimToggleButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimNumberScroller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimNumberScrollerItemProvider uimNumberScrollerItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimNumberScroller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimNumberScrollerAdapter() {
		if (uimNumberScrollerItemProvider == null) {
			uimNumberScrollerItemProvider = new UimNumberScrollerItemProvider(this);
		}

		return uimNumberScrollerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UmlReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UmlReferenceItemProvider umlReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UmlReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUmlReferenceAdapter() {
		if (umlReferenceItemProvider == null) {
			umlReferenceItemProvider = new UmlReferenceItemProvider(this);
		}

		return umlReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UserInteractionWorkspace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserInteractionWorkspaceItemProvider userInteractionWorkspaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UserInteractionWorkspace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserInteractionWorkspaceAdapter() {
		if (userInteractionWorkspaceItemProvider == null) {
			userInteractionWorkspaceItemProvider = new UserInteractionWorkspaceItemProvider(this);
		}

		return userInteractionWorkspaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.RequiredRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredRoleItemProvider requiredRoleItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.RequiredRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiredRoleAdapter() {
		if (requiredRoleItemProvider == null) {
			requiredRoleItemProvider = new RequiredRoleItemProvider(this);
		}

		return requiredRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.SecureObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecureObjectItemProvider secureObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.SecureObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecureObjectAdapter() {
		if (secureObjectItemProvider == null) {
			secureObjectItemProvider = new SecureObjectItemProvider(this);
		}

		return secureObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.EditableSecureObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditableSecureObjectItemProvider editableSecureObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.EditableSecureObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditableSecureObjectAdapter() {
		if (editableSecureObjectItemProvider == null) {
			editableSecureObjectItemProvider = new EditableSecureObjectItemProvider(this);
		}

		return editableSecureObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimFullLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimFullLayoutItemProvider uimFullLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimFullLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimFullLayoutAdapter() {
		if (uimFullLayoutItemProvider == null) {
			uimFullLayoutItemProvider = new UimFullLayoutItemProvider(this);
		}

		return uimFullLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimPanelItemProvider uimPanelItemProvider;

	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimPanelAdapter() {
		if (uimPanelItemProvider == null) {
			uimPanelItemProvider = new UimPanelItemProvider(this);
		}

		return uimPanelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (uimFormItemProvider != null) uimFormItemProvider.dispose();
		if (userInteractionModelItemProvider != null) userInteractionModelItemProvider.dispose();
		if (uimFieldItemProvider != null) uimFieldItemProvider.dispose();
		if (classFormItemProvider != null) classFormItemProvider.dispose();
		if (stateFormItemProvider != null) stateFormItemProvider.dispose();
		if (workspaceSecurityConstraintItemProvider != null) workspaceSecurityConstraintItemProvider.dispose();
		if (operationInvocationFormItemProvider != null) operationInvocationFormItemProvider.dispose();
		if (operationActionItemProvider != null) operationActionItemProvider.dispose();
		if (navigationToOperationItemProvider != null) navigationToOperationItemProvider.dispose();
		if (builtInActionItemProvider != null) builtInActionItemProvider.dispose();
		if (uimControlItemProvider != null) uimControlItemProvider.dispose();
		if (navigationToEntityItemProvider != null) navigationToEntityItemProvider.dispose();
		if (transitionActionItemProvider != null) transitionActionItemProvider.dispose();
		if (operationTaskFormItemProvider != null) operationTaskFormItemProvider.dispose();
		if (actionTaskFormItemProvider != null) actionTaskFormItemProvider.dispose();
		if (securityConstraintItemProvider != null) securityConstraintItemProvider.dispose();
		if (uimGridLayoutItemProvider != null) uimGridLayoutItemProvider.dispose();
		if (uimDataTableItemProvider != null) uimDataTableItemProvider.dispose();
		if (propertyRefItemProvider != null) propertyRefItemProvider.dispose();
		if (uimDataColumnItemProvider != null) uimDataColumnItemProvider.dispose();
		if (tableBindingItemProvider != null) tableBindingItemProvider.dispose();
		if (fieldBindingItemProvider != null) fieldBindingItemProvider.dispose();
		if (formPanelItemProvider != null) formPanelItemProvider.dispose();
		if (stateMachineFolderItemProvider != null) stateMachineFolderItemProvider.dispose();
		if (entityFolderItemProvider != null) entityFolderItemProvider.dispose();
		if (activityFolderItemProvider != null) activityFolderItemProvider.dispose();
		if (navigationBindingItemProvider != null) navigationBindingItemProvider.dispose();
		if (detailPanelItemProvider != null) detailPanelItemProvider.dispose();
		if (packageFolderItemProvider != null) packageFolderItemProvider.dispose();
		if (uimTabPanelItemProvider != null) uimTabPanelItemProvider.dispose();
		if (uimTabItemProvider != null) uimTabItemProvider.dispose();
		if (uimCheckBoxItemProvider != null) uimCheckBoxItemProvider.dispose();
		if (uimLookupItemProvider != null) uimLookupItemProvider.dispose();
		if (lookupBindingItemProvider != null) lookupBindingItemProvider.dispose();
		if (uimTextItemProvider != null) uimTextItemProvider.dispose();
		if (uimTextAreaItemProvider != null) uimTextAreaItemProvider.dispose();
		if (uimDropdownItemProvider != null) uimDropdownItemProvider.dispose();
		if (uimDatePopupItemProvider != null) uimDatePopupItemProvider.dispose();
		if (uimSingleSelectListBoxItemProvider != null) uimSingleSelectListBoxItemProvider.dispose();
		if (uimContainerItemProvider != null) uimContainerItemProvider.dispose();
		if (uimSingleSelectTreeViewItemProvider != null) uimSingleSelectTreeViewItemProvider.dispose();
		if (uimLayoutItemProvider != null) uimLayoutItemProvider.dispose();
		if (uimToolbarLayoutItemProvider != null) uimToolbarLayoutItemProvider.dispose();
		if (uimBorderLayoutItemProvider != null) uimBorderLayoutItemProvider.dispose();
		if (uimXYLayoutItemProvider != null) uimXYLayoutItemProvider.dispose();
		if (uimMultiSelectTreeViewItemProvider != null) uimMultiSelectTreeViewItemProvider.dispose();
		if (uimMultiSelectListBoxItemProvider != null) uimMultiSelectListBoxItemProvider.dispose();
		if (uimMultiSelectPopupSearchItemProvider != null) uimMultiSelectPopupSearchItemProvider.dispose();
		if (uimSingleSelectPopupSearchItemProvider != null) uimSingleSelectPopupSearchItemProvider.dispose();
		if (uimToggleButtonItemProvider != null) uimToggleButtonItemProvider.dispose();
		if (uimNumberScrollerItemProvider != null) uimNumberScrollerItemProvider.dispose();
		if (umlReferenceItemProvider != null) umlReferenceItemProvider.dispose();
		if (userInteractionWorkspaceItemProvider != null) userInteractionWorkspaceItemProvider.dispose();
		if (requiredRoleItemProvider != null) requiredRoleItemProvider.dispose();
		if (secureObjectItemProvider != null) secureObjectItemProvider.dispose();
		if (editableSecureObjectItemProvider != null) editableSecureObjectItemProvider.dispose();
		if (uimFullLayoutItemProvider != null) uimFullLayoutItemProvider.dispose();
		if (uimPanelItemProvider != null) uimPanelItemProvider.dispose();
	}

}
