/*
 * File generated by Grasland Grammar Generator on Dec 23, 2006 7:43:22 PM
 */
package net.sf.nakeduml.javametamodel;

import java.util.Map;

import net.sf.nakeduml.javametamodel.generated.OJForStatementGEN;
import net.sf.nakeduml.javametamodel.utilities.JavaStringHelpers;

public class OJForStatement extends OJForStatementGEN {

	/**
	 * Constructor for OJForStatement
	 * 
	 * @param name
	 * @param comment
	 * @param elemName
	 * @param collection
	 */
	public OJForStatement(String name, String comment, String elemName, String collection) {
		super(name, comment, elemName, collection);
	}

	/**
	 * Constructor for OJForStatement
	 */
	public OJForStatement() {
		super();
	}

	public String toJavaString() {
		String result = "for ( " + getElemType().getCollectionTypeName() + " " + getElemName() + " : " + getCollection() + " ) {\n";
		result = result + JavaStringHelpers.indent(getBody().toJavaString(), 1) + "\n}";
		return result;
	}

	public OJForStatement getDeepCopy() {
		OJForStatement copy = new OJForStatement();
		copyDeepInfoInto(copy);
		return copy;
	}

	public void copyDeepInfoInto(OJForStatement copy) {
		super.copyDeepInfoInto(copy);
		copy.setElemName(getElemName());
		copy.setCollection(getCollection());
		if (getElemType() != null) {
			copy.setElemType(getElemType().getDeepCopy());
		}
		if (getBody() != null) {
			copy.setBody(getBody().getDeepCopy());
		}
	}

	public void renameAll(Map<String, OJPathName> renamePathNames, String newName) {
		if (getElemType() != null) {
			getElemType().renameAll(renamePathNames, newName);
			for (OJPathName pathName : renamePathNames.values()) {
				if (getCollection().contains("<" + pathName.getLast() + ">")) {
					setCollection(getCollection().replace("<" + pathName.getLast() + ">", "<" + pathName.getLast() + newName + ">"));
				}
			}
		}
		if (getBody() != null) {
			getBody().renameAll(renamePathNames, newName);
		}
	}

}