#macro(init $regionContainer)
#if($regionContainer.container)
#set($initialNodeName="node")
#if($regionContainer.completionTransitions.isEmpty())
#set($finalNodeName="state")
#else
#set($finalNodeName="node")
#end
#else
#set($initialNodeName="start-state")
#set($finalNodeName="end-state")
#end
#end
#init($regionContainer)
#if($regionContainer.regions.size()>1)##multiple regions
  <$initialNodeName name="artificial_start_${regionContainer.mappingInfo.persistentName}">
    <transition to="artificial_fork_${regionContainer.mappingInfo.persistentName}"/>
  </$initialNodeName>
  <fork name="artificial_fork_${regionContainer.mappingInfo.persistentName}">  
#foreach($region in $regionContainer.regions)
#if($region.initialState)
    <transition name="to_${region.initialState.mappingInfo.persistentName}" to="${region.initialState.mappingInfo.persistentName}"/>
#end
#end  
  </fork>
#foreach($region in $regionContainer.regions)
#if($region.initialState)
  <node name="$region.initialState.mappingInfo.persistentName">
#set($state=$region.initialState)
#parse("StateMachine/Transitions.vsf")
  </node>
#end  
#end  
#else##single regions
#foreach($region in $regionContainer.regions)
#if($region.initialState)
  <$initialNodeName name="$region.initialState.mappingInfo.persistentName">
#set($state=$region.initialState)
#parse("StateMachine/Transitions.vsf")
  </$initialNodeName>
#end
#end
#end##$regionContainer.regions.size()>1
#foreach($region in $regionContainer.regions)
#foreach($state in $region.states)
#if($state.kind.isSimple())
#if($state.completionTransitions.size()>0)#set($nodeName="node")#else#set($nodeName="state")#end
  <$nodeName name="${state.mappingInfo.persistentName}" >
#if($state.completionTransitions.size()>0)
    <action expression="#{process.on${state.mappingInfo.javaName.capped}}"/>
#end
#if($state.timeTriggerTransitions.size()>0)
    <event type="node-enter">
      <action expression="#{process.fireTimersFor${state.mappingInfo.javaName}}"/>
    </event>
    <event type="node-leave">
      <action expression="#{process.cancelTimersFor${state.mappingInfo.javaName}}"/>
    </event>
#end  
#parse("StateMachine/Transitions.vsf")
  </$nodeName>
#elseif($state.kind.isOrthogonal() || $state.kind.isComposite())
  <super-state name="${state.mappingInfo.persistentName}" >
#set($d=$stack1.push($regionContainer))
#set($d=$stack2.push($state))
#set($d=$stack3.push($region))
#set($regionContainer=$state)
#parse("StateMachine/RegionContainer.vsf")
#set($regionContainer=$stack1.pop())
#set($state=$stack2.pop())
#set($region=$stack3.pop())
#init($regionContainer)
#parse("StateMachine/Transitions.vsf")
  </super-state>
#elseif($state.kind.isChoice() || $state.kind.isJunction())
  <decision name="${state.mappingInfo.persistentName}">
#foreach($transition in ${state.outgoing})  
    <transition name="${transition.mappingInfo.persistentName}" to="${transition.target.mappingInfo.persistentName}" >
#if($transition.guard)
        <condition>#{process.${transition.guard.mappingInfo.javaName}()}</condition>    
#end    
    </transition>
#end    
  </decision>
#elseif($state.kind.isFinal())
#if($regionContainer.regions.size()>1)
  <node name="${state.mappingInfo.persistentName}">
    <transition name="to_artificial_join_${regionContainer.mappingInfo.persistentName}" to="artificial_join_${regionContainer.mappingInfo.persistentName}"/>
  </node>  
#else
  <${finalNodeName} name="${state.mappingInfo.persistentName}">
#if($state.enclosingState.completionTransitions.size()>0)
    <action expression="#{process.on${state.enclosingState.mappingInfo.javaName.capped}}"/>
#end  
  </${finalNodeName}>  
#end
#else
#if($state.kind.isJoin())
#set($nodeName="join")
#elseif($state.kind.isFork())
#set($nodeName="fork")
#elseif($state.kind.isInitial())
##already generated
#set($nodeName=false)
#else
#set($nodeName="node")
#end
#if($nodeName)
  <${nodeName} name="${state.mappingInfo.persistentName}">
#parse("StateMachine/Transitions.vsf")
  </${nodeName}>
#end
#end
#end
#end
#if($regionContainer.regions.size()>1)##multiple regions
  <join name="artificial_join_${regionContainer.mappingInfo.persistentName}">
    <transition to="artificial_final_${regionContainer.mappingInfo.persistentName}"/>
  </join>
  <${finalNodeName} name="artificial_final_${regionContainer.mappingInfo.persistentName}">
#if($state.enclosingState.completionTransitions.size()>0)
     <action expression="#{process.on${state.enclosingState.mappingInfo.javaName.capped}}"/>
#end  
  </${finalNodeName}>  
#end
