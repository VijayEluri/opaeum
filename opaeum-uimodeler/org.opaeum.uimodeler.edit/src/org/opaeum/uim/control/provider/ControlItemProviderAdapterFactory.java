/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opaeum.uim.control.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.opaeum.uim.control.util.ControlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ControlItemProviderAdapterFactory extends ControlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ControlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimNumberScroller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimNumberScrollerItemProvider uimNumberScrollerItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimNumberScroller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimNumberScrollerAdapter() {
		if (uimNumberScrollerItemProvider == null) {
			uimNumberScrollerItemProvider = new UimNumberScrollerItemProvider(this);
		}

		return uimNumberScrollerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimToggleButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimToggleButtonItemProvider uimToggleButtonItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimToggleButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimToggleButtonAdapter() {
		if (uimToggleButtonItemProvider == null) {
			uimToggleButtonItemProvider = new UimToggleButtonItemProvider(this);
		}

		return uimToggleButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimSingleSelectPopupSearch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimSingleSelectPopupSearchItemProvider uimSingleSelectPopupSearchItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimSingleSelectPopupSearch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimSingleSelectPopupSearchAdapter() {
		if (uimSingleSelectPopupSearchItemProvider == null) {
			uimSingleSelectPopupSearchItemProvider = new UimSingleSelectPopupSearchItemProvider(this);
		}

		return uimSingleSelectPopupSearchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimMultiSelectPopupSearch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimMultiSelectPopupSearchItemProvider uimMultiSelectPopupSearchItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimMultiSelectPopupSearch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimMultiSelectPopupSearchAdapter() {
		if (uimMultiSelectPopupSearchItemProvider == null) {
			uimMultiSelectPopupSearchItemProvider = new UimMultiSelectPopupSearchItemProvider(this);
		}

		return uimMultiSelectPopupSearchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimMultiSelectTreeView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimMultiSelectTreeViewItemProvider uimMultiSelectTreeViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimMultiSelectTreeView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimMultiSelectTreeViewAdapter() {
		if (uimMultiSelectTreeViewItemProvider == null) {
			uimMultiSelectTreeViewItemProvider = new UimMultiSelectTreeViewItemProvider(this);
		}

		return uimMultiSelectTreeViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimMultiSelectListBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimMultiSelectListBoxItemProvider uimMultiSelectListBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimMultiSelectListBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimMultiSelectListBoxAdapter() {
		if (uimMultiSelectListBoxItemProvider == null) {
			uimMultiSelectListBoxItemProvider = new UimMultiSelectListBoxItemProvider(this);
		}

		return uimMultiSelectListBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimDropdown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDropdownItemProvider uimDropdownItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimDropdown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDropdownAdapter() {
		if (uimDropdownItemProvider == null) {
			uimDropdownItemProvider = new UimDropdownItemProvider(this);
		}

		return uimDropdownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimCheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimCheckBoxItemProvider uimCheckBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimCheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimCheckBoxAdapter() {
		if (uimCheckBoxItemProvider == null) {
			uimCheckBoxItemProvider = new UimCheckBoxItemProvider(this);
		}

		return uimCheckBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimLookup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimLookupItemProvider uimLookupItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimLookup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimLookupAdapter() {
		if (uimLookupItemProvider == null) {
			uimLookupItemProvider = new UimLookupItemProvider(this);
		}

		return uimLookupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimTextArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTextAreaItemProvider uimTextAreaItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimTextArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTextAreaAdapter() {
		if (uimTextAreaItemProvider == null) {
			uimTextAreaItemProvider = new UimTextAreaItemProvider(this);
		}

		return uimTextAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTextItemProvider uimTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTextAdapter() {
		if (uimTextItemProvider == null) {
			uimTextItemProvider = new UimTextItemProvider(this);
		}

		return uimTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimDatePopup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDatePopupItemProvider uimDatePopupItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimDatePopup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDatePopupAdapter() {
		if (uimDatePopupItemProvider == null) {
			uimDatePopupItemProvider = new UimDatePopupItemProvider(this);
		}

		return uimDatePopupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimSingleSelectListBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimSingleSelectListBoxItemProvider uimSingleSelectListBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimSingleSelectListBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimSingleSelectListBoxAdapter() {
		if (uimSingleSelectListBoxItemProvider == null) {
			uimSingleSelectListBoxItemProvider = new UimSingleSelectListBoxItemProvider(this);
		}

		return uimSingleSelectListBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimControlItemProvider uimControlItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimControlAdapter() {
		if (uimControlItemProvider == null) {
			uimControlItemProvider = new UimControlItemProvider(this);
		}

		return uimControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimSingleSelectTreeView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimSingleSelectTreeViewItemProvider uimSingleSelectTreeViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimSingleSelectTreeView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimSingleSelectTreeViewAdapter() {
		if (uimSingleSelectTreeViewItemProvider == null) {
			uimSingleSelectTreeViewItemProvider = new UimSingleSelectTreeViewItemProvider(this);
		}

		return uimSingleSelectTreeViewItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (uimNumberScrollerItemProvider != null) uimNumberScrollerItemProvider.dispose();
		if (uimToggleButtonItemProvider != null) uimToggleButtonItemProvider.dispose();
		if (uimSingleSelectPopupSearchItemProvider != null) uimSingleSelectPopupSearchItemProvider.dispose();
		if (uimMultiSelectPopupSearchItemProvider != null) uimMultiSelectPopupSearchItemProvider.dispose();
		if (uimMultiSelectTreeViewItemProvider != null) uimMultiSelectTreeViewItemProvider.dispose();
		if (uimMultiSelectListBoxItemProvider != null) uimMultiSelectListBoxItemProvider.dispose();
		if (uimDropdownItemProvider != null) uimDropdownItemProvider.dispose();
		if (uimCheckBoxItemProvider != null) uimCheckBoxItemProvider.dispose();
		if (uimLookupItemProvider != null) uimLookupItemProvider.dispose();
		if (uimTextAreaItemProvider != null) uimTextAreaItemProvider.dispose();
		if (uimTextItemProvider != null) uimTextItemProvider.dispose();
		if (uimDatePopupItemProvider != null) uimDatePopupItemProvider.dispose();
		if (uimSingleSelectListBoxItemProvider != null) uimSingleSelectListBoxItemProvider.dispose();
		if (uimControlItemProvider != null) uimControlItemProvider.dispose();
		if (uimSingleSelectTreeViewItemProvider != null) uimSingleSelectTreeViewItemProvider.dispose();
	}

}
