/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opaeum.uim.form.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.opaeum.uim.form.util.FormAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FormItemProviderAdapterFactory extends FormAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FormItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.form.FormPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormPanelItemProvider formPanelItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.form.FormPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormPanelAdapter() {
		if (formPanelItemProvider == null) {
			formPanelItemProvider = new FormPanelItemProvider(this);
		}

		return formPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.form.ActionTaskForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionTaskFormItemProvider actionTaskFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.form.ActionTaskForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionTaskFormAdapter() {
		if (actionTaskFormItemProvider == null) {
			actionTaskFormItemProvider = new ActionTaskFormItemProvider(this);
		}

		return actionTaskFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.form.StateForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateFormItemProvider stateFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.form.StateForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateFormAdapter() {
		if (stateFormItemProvider == null) {
			stateFormItemProvider = new StateFormItemProvider(this);
		}

		return stateFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.form.ClassForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassFormItemProvider classFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.form.ClassForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassFormAdapter() {
		if (classFormItemProvider == null) {
			classFormItemProvider = new ClassFormItemProvider(this);
		}

		return classFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.form.UimForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimFormItemProvider uimFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.form.UimForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimFormAdapter() {
		if (uimFormItemProvider == null) {
			uimFormItemProvider = new UimFormItemProvider(this);
		}

		return uimFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.form.OperationTaskForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationTaskFormItemProvider operationTaskFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.form.OperationTaskForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationTaskFormAdapter() {
		if (operationTaskFormItemProvider == null) {
			operationTaskFormItemProvider = new OperationTaskFormItemProvider(this);
		}

		return operationTaskFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.form.OperationInvocationForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationInvocationFormItemProvider operationInvocationFormItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.form.OperationInvocationForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationInvocationFormAdapter() {
		if (operationInvocationFormItemProvider == null) {
			operationInvocationFormItemProvider = new OperationInvocationFormItemProvider(this);
		}

		return operationInvocationFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.form.DetailPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DetailPanelItemProvider detailPanelItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.form.DetailPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDetailPanelAdapter() {
		if (detailPanelItemProvider == null) {
			detailPanelItemProvider = new DetailPanelItemProvider(this);
		}

		return detailPanelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (formPanelItemProvider != null) formPanelItemProvider.dispose();
		if (actionTaskFormItemProvider != null) actionTaskFormItemProvider.dispose();
		if (stateFormItemProvider != null) stateFormItemProvider.dispose();
		if (classFormItemProvider != null) classFormItemProvider.dispose();
		if (uimFormItemProvider != null) uimFormItemProvider.dispose();
		if (operationTaskFormItemProvider != null) operationTaskFormItemProvider.dispose();
		if (operationInvocationFormItemProvider != null) operationInvocationFormItemProvider.dispose();
		if (detailPanelItemProvider != null) detailPanelItemProvider.dispose();
	}

}
