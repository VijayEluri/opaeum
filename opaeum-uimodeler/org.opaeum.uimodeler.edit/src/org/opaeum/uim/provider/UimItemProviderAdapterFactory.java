/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.opaeum.uim.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.opaeum.uim.util.UimAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UimItemProviderAdapterFactory extends UimAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UimItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.UimField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimFieldItemProvider uimFieldItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.UimField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimFieldAdapter() {
		if (uimFieldItemProvider == null) {
			uimFieldItemProvider = new UimFieldItemProvider(this);
		}

		return uimFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.UimDataTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDataTableItemProvider uimDataTableItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.UimDataTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDataTableAdapter() {
		if (uimDataTableItemProvider == null) {
			uimDataTableItemProvider = new UimDataTableItemProvider(this);
		}

		return uimDataTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.UimTabPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTabPanelItemProvider uimTabPanelItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.UimTabPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTabPanelAdapter() {
		if (uimTabPanelItemProvider == null) {
			uimTabPanelItemProvider = new UimTabPanelItemProvider(this);
		}

		return uimTabPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.UimTab} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTabItemProvider uimTabItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.UimTab}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTabAdapter() {
		if (uimTabItemProvider == null) {
			uimTabItemProvider = new UimTabItemProvider(this);
		}

		return uimTabItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.UimContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimContainerItemProvider uimContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.UimContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimContainerAdapter() {
		if (uimContainerItemProvider == null) {
			uimContainerItemProvider = new UimContainerItemProvider(this);
		}

		return uimContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.UmlReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UmlReferenceItemProvider umlReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.UmlReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUmlReferenceAdapter() {
		if (umlReferenceItemProvider == null) {
			umlReferenceItemProvider = new UmlReferenceItemProvider(this);
		}

		return umlReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.UimPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimPanelItemProvider uimPanelItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.UimPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimPanelAdapter() {
		if (uimPanelItemProvider == null) {
			uimPanelItemProvider = new UimPanelItemProvider(this);
		}

		return uimPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.ObjectSelectorTree} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectSelectorTreeItemProvider objectSelectorTreeItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.ObjectSelectorTree}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectSelectorTreeAdapter() {
		if (objectSelectorTreeItemProvider == null) {
			objectSelectorTreeItemProvider = new ObjectSelectorTreeItemProvider(this);
		}

		return objectSelectorTreeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (uimFieldItemProvider != null) uimFieldItemProvider.dispose();
		if (uimDataTableItemProvider != null) uimDataTableItemProvider.dispose();
		if (uimTabPanelItemProvider != null) uimTabPanelItemProvider.dispose();
		if (uimTabItemProvider != null) uimTabItemProvider.dispose();
		if (uimContainerItemProvider != null) uimContainerItemProvider.dispose();
		if (umlReferenceItemProvider != null) umlReferenceItemProvider.dispose();
		if (uimPanelItemProvider != null) uimPanelItemProvider.dispose();
		if (objectSelectorTreeItemProvider != null) objectSelectorTreeItemProvider.dispose();
	}

}
