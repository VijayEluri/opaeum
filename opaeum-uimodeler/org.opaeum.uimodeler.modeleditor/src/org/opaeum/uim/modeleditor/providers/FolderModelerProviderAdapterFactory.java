/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.opaeum.uim.modeleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.opaeum.uim.folder.util.FolderAdapterFactory;
import org.topcased.modeler.providers.ILabelFeatureProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class FolderModelerProviderAdapterFactory extends FolderAdapterFactory implements ComposeableAdapterFactory,IChangeNotifier,IDisposable{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.AbstractFolder} instances.
	 * 
	 * @generated
	 */
	private AbstractFolderModelerProvider abstractfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.ActivityFolder} instances.
	 * 
	 * @generated
	 */
	private ActivityFolderModelerProvider activityfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.EntityFolder} instances.
	 * 
	 * @generated
	 */
	private EntityFolderModelerProvider entityfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.StateMachineFolder} instances.
	 * 
	 * @generated
	 */
	private StateMachineFolderModelerProvider statemachinefolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.AbstractFormFolder} instances.
	 * 
	 * @generated
	 */
	private AbstractFormFolderModelerProvider abstractformfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.PackageFolder} instances.
	 * 
	 * @generated
	 */
	private PackageFolderModelerProvider packagefolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.OperationContainingFolder} instances.
	 * 
	 * @generated
	 */
	private OperationContainingFolderModelerProvider operationcontainingfolderModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.UserInteractionModel} instances.
	 * 
	 * @generated
	 */
	private UserInteractionModelModelerProvider userinteractionmodelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.folder.UserInteractionWorkspace} instances.
	 * 
	 * @generated
	 */
	private UserInteractionWorkspaceModelerProvider userinteractionworkspaceModelerProvider;
	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public FolderModelerProviderAdapterFactory(){
		supportedTypes.add(ILabelFeatureProvider.class);
	}
	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory(){
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}
	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory){
		this.parentAdapterFactory = parentAdapterFactory;
	}
	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type){
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}
	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier,Object type){
		return super.adapt(notifier, this);
	}
	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object,Object type){
		if(isFactoryForType(type)){
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class) || (((Class) type).isInstance(adapter))){
				return adapter;
			}
		}
		return null;
	}
	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.addListener(notifyChangedListener);
	}
	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.removeListener(notifyChangedListener);
	}
	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification){
		changeNotifier.fireNotifyChanged(notification);
		if(parentAdapterFactory != null){
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.AbstractFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAbstractFolderAdapter(){
		if(abstractfolderModelerProvider == null){
			abstractfolderModelerProvider = new AbstractFolderModelerProvider(this);
		}
		return abstractfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.ActivityFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createActivityFolderAdapter(){
		if(activityfolderModelerProvider == null){
			activityfolderModelerProvider = new ActivityFolderModelerProvider(this);
		}
		return activityfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.EntityFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEntityFolderAdapter(){
		if(entityfolderModelerProvider == null){
			entityfolderModelerProvider = new EntityFolderModelerProvider(this);
		}
		return entityfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.StateMachineFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStateMachineFolderAdapter(){
		if(statemachinefolderModelerProvider == null){
			statemachinefolderModelerProvider = new StateMachineFolderModelerProvider(this);
		}
		return statemachinefolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.AbstractFormFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAbstractFormFolderAdapter(){
		if(abstractformfolderModelerProvider == null){
			abstractformfolderModelerProvider = new AbstractFormFolderModelerProvider(this);
		}
		return abstractformfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.PackageFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPackageFolderAdapter(){
		if(packagefolderModelerProvider == null){
			packagefolderModelerProvider = new PackageFolderModelerProvider(this);
		}
		return packagefolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.OperationContainingFolder}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationContainingFolderAdapter(){
		if(operationcontainingfolderModelerProvider == null){
			operationcontainingfolderModelerProvider = new OperationContainingFolderModelerProvider(this);
		}
		return operationcontainingfolderModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.UserInteractionModel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUserInteractionModelAdapter(){
		if(userinteractionmodelModelerProvider == null){
			userinteractionmodelModelerProvider = new UserInteractionModelModelerProvider(this);
		}
		return userinteractionmodelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.folder.UserInteractionWorkspace}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUserInteractionWorkspaceAdapter(){
		if(userinteractionworkspaceModelerProvider == null){
			userinteractionworkspaceModelerProvider = new UserInteractionWorkspaceModelerProvider(this);
		}
		return userinteractionworkspaceModelerProvider;
	}
	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose(){
		if(abstractfolderModelerProvider != null){
			abstractfolderModelerProvider.dispose();
		}
		if(activityfolderModelerProvider != null){
			activityfolderModelerProvider.dispose();
		}
		if(entityfolderModelerProvider != null){
			entityfolderModelerProvider.dispose();
		}
		if(statemachinefolderModelerProvider != null){
			statemachinefolderModelerProvider.dispose();
		}
		if(abstractformfolderModelerProvider != null){
			abstractformfolderModelerProvider.dispose();
		}
		if(packagefolderModelerProvider != null){
			packagefolderModelerProvider.dispose();
		}
		if(operationcontainingfolderModelerProvider != null){
			operationcontainingfolderModelerProvider.dispose();
		}
		if(userinteractionmodelModelerProvider != null){
			userinteractionmodelModelerProvider.dispose();
		}
		if(userinteractionworkspaceModelerProvider != null){
			userinteractionworkspaceModelerProvider.dispose();
		}
	}
}
