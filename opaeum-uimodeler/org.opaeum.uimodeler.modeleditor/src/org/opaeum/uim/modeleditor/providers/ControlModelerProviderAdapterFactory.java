/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.opaeum.uim.modeleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.opaeum.uim.control.util.ControlAdapterFactory;
import org.topcased.modeler.providers.ILabelFeatureProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class ControlModelerProviderAdapterFactory extends ControlAdapterFactory implements ComposeableAdapterFactory,IChangeNotifier,IDisposable{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimNumberScroller} instances.
	 * 
	 * @generated
	 */
	private UimNumberScrollerModelerProvider uimnumberscrollerModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimToggleButton} instances.
	 * 
	 * @generated
	 */
	private UimToggleButtonModelerProvider uimtogglebuttonModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimSingleSelectPopupSearch} instances.
	 * 
	 * @generated
	 */
	private UimSingleSelectPopupSearchModelerProvider uimsingleselectpopupsearchModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimMultiSelectPopupSearch} instances.
	 * 
	 * @generated
	 */
	private UimMultiSelectPopupSearchModelerProvider uimmultiselectpopupsearchModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimMultiSelectTreeView} instances.
	 * 
	 * @generated
	 */
	private UimMultiSelectTreeViewModelerProvider uimmultiselecttreeviewModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimMultiSelectListBox} instances.
	 * 
	 * @generated
	 */
	private UimMultiSelectListBoxModelerProvider uimmultiselectlistboxModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimDropdown} instances.
	 * 
	 * @generated
	 */
	private UimDropdownModelerProvider uimdropdownModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimCheckBox} instances.
	 * 
	 * @generated
	 */
	private UimCheckBoxModelerProvider uimcheckboxModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimLookup} instances.
	 * 
	 * @generated
	 */
	private UimLookupModelerProvider uimlookupModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimTextArea} instances.
	 * 
	 * @generated
	 */
	private UimTextAreaModelerProvider uimtextareaModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimText} instances.
	 * 
	 * @generated
	 */
	private UimTextModelerProvider uimtextModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimDatePopup} instances.
	 * 
	 * @generated
	 */
	private UimDatePopupModelerProvider uimdatepopupModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimSingleSelectListBox} instances.
	 * 
	 * @generated
	 */
	private UimSingleSelectListBoxModelerProvider uimsingleselectlistboxModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimControl} instances.
	 * 
	 * @generated
	 */
	private UimControlModelerProvider uimcontrolModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimSingleSelectTreeView} instances.
	 * 
	 * @generated
	 */
	private UimSingleSelectTreeViewModelerProvider uimsingleselecttreeviewModelerProvider;
	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public ControlModelerProviderAdapterFactory(){
		supportedTypes.add(ILabelFeatureProvider.class);
	}
	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory(){
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}
	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory){
		this.parentAdapterFactory = parentAdapterFactory;
	}
	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type){
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}
	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier,Object type){
		return super.adapt(notifier, this);
	}
	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object,Object type){
		if(isFactoryForType(type)){
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class) || (((Class) type).isInstance(adapter))){
				return adapter;
			}
		}
		return null;
	}
	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.addListener(notifyChangedListener);
	}
	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.removeListener(notifyChangedListener);
	}
	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification){
		changeNotifier.fireNotifyChanged(notification);
		if(parentAdapterFactory != null){
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimNumberScroller}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimNumberScrollerAdapter(){
		if(uimnumberscrollerModelerProvider == null){
			uimnumberscrollerModelerProvider = new UimNumberScrollerModelerProvider(this);
		}
		return uimnumberscrollerModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimToggleButton}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimToggleButtonAdapter(){
		if(uimtogglebuttonModelerProvider == null){
			uimtogglebuttonModelerProvider = new UimToggleButtonModelerProvider(this);
		}
		return uimtogglebuttonModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimSingleSelectPopupSearch}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimSingleSelectPopupSearchAdapter(){
		if(uimsingleselectpopupsearchModelerProvider == null){
			uimsingleselectpopupsearchModelerProvider = new UimSingleSelectPopupSearchModelerProvider(this);
		}
		return uimsingleselectpopupsearchModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimMultiSelectPopupSearch}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimMultiSelectPopupSearchAdapter(){
		if(uimmultiselectpopupsearchModelerProvider == null){
			uimmultiselectpopupsearchModelerProvider = new UimMultiSelectPopupSearchModelerProvider(this);
		}
		return uimmultiselectpopupsearchModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimMultiSelectTreeView}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimMultiSelectTreeViewAdapter(){
		if(uimmultiselecttreeviewModelerProvider == null){
			uimmultiselecttreeviewModelerProvider = new UimMultiSelectTreeViewModelerProvider(this);
		}
		return uimmultiselecttreeviewModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimMultiSelectListBox}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimMultiSelectListBoxAdapter(){
		if(uimmultiselectlistboxModelerProvider == null){
			uimmultiselectlistboxModelerProvider = new UimMultiSelectListBoxModelerProvider(this);
		}
		return uimmultiselectlistboxModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimDropdown}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimDropdownAdapter(){
		if(uimdropdownModelerProvider == null){
			uimdropdownModelerProvider = new UimDropdownModelerProvider(this);
		}
		return uimdropdownModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimCheckBox}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimCheckBoxAdapter(){
		if(uimcheckboxModelerProvider == null){
			uimcheckboxModelerProvider = new UimCheckBoxModelerProvider(this);
		}
		return uimcheckboxModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimLookup}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimLookupAdapter(){
		if(uimlookupModelerProvider == null){
			uimlookupModelerProvider = new UimLookupModelerProvider(this);
		}
		return uimlookupModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimTextArea}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimTextAreaAdapter(){
		if(uimtextareaModelerProvider == null){
			uimtextareaModelerProvider = new UimTextAreaModelerProvider(this);
		}
		return uimtextareaModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimText}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimTextAdapter(){
		if(uimtextModelerProvider == null){
			uimtextModelerProvider = new UimTextModelerProvider(this);
		}
		return uimtextModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimDatePopup}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimDatePopupAdapter(){
		if(uimdatepopupModelerProvider == null){
			uimdatepopupModelerProvider = new UimDatePopupModelerProvider(this);
		}
		return uimdatepopupModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimSingleSelectListBox}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimSingleSelectListBoxAdapter(){
		if(uimsingleselectlistboxModelerProvider == null){
			uimsingleselectlistboxModelerProvider = new UimSingleSelectListBoxModelerProvider(this);
		}
		return uimsingleselectlistboxModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimControl}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimControlAdapter(){
		if(uimcontrolModelerProvider == null){
			uimcontrolModelerProvider = new UimControlModelerProvider(this);
		}
		return uimcontrolModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimSingleSelectTreeView}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimSingleSelectTreeViewAdapter(){
		if(uimsingleselecttreeviewModelerProvider == null){
			uimsingleselecttreeviewModelerProvider = new UimSingleSelectTreeViewModelerProvider(this);
		}
		return uimsingleselecttreeviewModelerProvider;
	}
	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose(){
		if(uimnumberscrollerModelerProvider != null){
			uimnumberscrollerModelerProvider.dispose();
		}
		if(uimtogglebuttonModelerProvider != null){
			uimtogglebuttonModelerProvider.dispose();
		}
		if(uimsingleselectpopupsearchModelerProvider != null){
			uimsingleselectpopupsearchModelerProvider.dispose();
		}
		if(uimmultiselectpopupsearchModelerProvider != null){
			uimmultiselectpopupsearchModelerProvider.dispose();
		}
		if(uimmultiselecttreeviewModelerProvider != null){
			uimmultiselecttreeviewModelerProvider.dispose();
		}
		if(uimmultiselectlistboxModelerProvider != null){
			uimmultiselectlistboxModelerProvider.dispose();
		}
		if(uimdropdownModelerProvider != null){
			uimdropdownModelerProvider.dispose();
		}
		if(uimcheckboxModelerProvider != null){
			uimcheckboxModelerProvider.dispose();
		}
		if(uimlookupModelerProvider != null){
			uimlookupModelerProvider.dispose();
		}
		if(uimtextareaModelerProvider != null){
			uimtextareaModelerProvider.dispose();
		}
		if(uimtextModelerProvider != null){
			uimtextModelerProvider.dispose();
		}
		if(uimdatepopupModelerProvider != null){
			uimdatepopupModelerProvider.dispose();
		}
		if(uimsingleselectlistboxModelerProvider != null){
			uimsingleselectlistboxModelerProvider.dispose();
		}
		if(uimcontrolModelerProvider != null){
			uimcontrolModelerProvider.dispose();
		}
		if(uimsingleselecttreeviewModelerProvider != null){
			uimsingleselecttreeviewModelerProvider.dispose();
		}
	}
}
