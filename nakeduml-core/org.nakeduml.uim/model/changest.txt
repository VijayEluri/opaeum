CM1
Environment implementation for Seam2
Persistence implementation
Remove old auditing
Do data restoration with an XML document


Eclipse
Reverse engineer a profile into the workspace
StarterAction - automatically set maven group id as package prefix of mappedimplementationpackage of rootObjects
GEneratorGenerator - make this an eclipse plugin too

NakedUML Topcased
Parameters section for behaviors
Pre and post conditions for behaviors, operations and actions
Invariants for classifiers
Async actions for Screenflows, Responsibilities, 
Action to Convert methods to business processes
Argument Pin table and composite for invocation actions 
Action to generate screenflow, process,method or operation on call action
For Parameter nodes, choose parameters either from activity or containing statemachine

Refactoring
Port BehaviorUtil to EmfBehaviorUtil and identify processes and tasks during extraction
Change all visitors to become transformation steps
Move Emf stuff to a project under the core feature

UIM
Put label width on all possible containers of fields
Row height on uimColumnLayout
remove fields pointing to obsolete properties
remove operation navigations and action buttons to obsolete operations
remove obsolete forms 
allow forms to be reused as panels
Add button bar for actions on multiple rows in the table
Introduce entryScreen for components, allow formpanels to be used, have an external and internal view
Introduce ocl expressions for things such as lookups and security constraints

Processes
Rethink the queue per signal idea - consider the implications of migration

TaskManagement
Model UserInterface too
Implement ports as default interfaces that delegate operations to the containing component. Such invocations would either delegate to users or delegate
to a process (ownedBehaviour of the component)
Swimlanes WITHOUT property "represents" and task definitions specify potentialOwners, Swimlanes WITH property "represents" and Target pins specify actual owners.
Swimlanes with Classifier Represents and no potential Owners will use ClassifierX.allInstance() for POTENTIAL owners 
Create one task per value in targetElement expression
Remember that Responsibilities implemented as STateMachines are TaskObjects, not OperationProcessObjects

Operations
Calculate which operations are long running
All long-running operations should provide a second method providing the calling context
AcceptCallAction - store operation structure
unmarshall the pins to allow OCL compilation for postconditions
Consider all operations that have triggers associated with them to be long -running - remember the event occurrence queue ide


Statemachines
Implement effects, entry and do-action subprocess calls
Implement state invariants


Classes
Generalizationsets
PowerTypes
link powerTypeInstances with generalization

Activities
Implement real asynchronous actions, i.e. call the action in another physical thread
Log all events as well as asynchronous actions and signals directly in database and deliver them asynchronously
For event occurrences, put them in the queue of the object
For all activities that start with an event, instantiate the activity in the context's event handler
For all events implement correlation logic in the context;s event handler
For time events and change events, request the events when the context is created. Assume that relative time events need to be repeated.


Maven
put MavenArtefatId in profile

Validation
ModelNameUniqueness
Asynchronous actions cannot have outputs
Date type to be specified when using timeevents

Runtime
For BusinessComponent instances, add a property called LDAP Identifier which associates that instance with an ldap entry
On BusinessRole, have a boolean field that states if a user can automatically create such a role instance
On login, check ldap query for logged in user and take the user through a wizard adding a businessrole instance for every potential role 
where the user also belongs to the ldap group that represents the businesscomponentinstance
For ocl expressions from uim - use Javassist to generate expressions at runtime, including common composite logic
For preconditions on operations that do NOT refer to parameters, disable the operationNavigation or action if it evaluates to false
For preconditions of transitions that do NOT refer to event parameters, disable the associated operationNaviation/actionButton if it evualuates to false
For notification templates, isolate velocity statements and remove empty containing nodes from treee
For notications templates, repeat rows if table contained in a foreach 