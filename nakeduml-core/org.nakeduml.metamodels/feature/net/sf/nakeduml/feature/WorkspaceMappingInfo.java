package net.sf.nakeduml.feature;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Random;
import java.util.Set;


public class WorkspaceMappingInfo {
	private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("#0.000000");
	private Properties properties;
	private Map<String,MappingInfo> mappingInfoMap = new HashMap<String,MappingInfo>();
	private File file;
	private int currentRevision;
	private float currentVersion;
	private int nakedUmlIdMaxValue;
	Random random = new Random();
	private WorkspaceMappingInfo(){
		this.properties = new SortedProperties();
	}
	public WorkspaceMappingInfo(File file){
		this();
		this.file = file;
		if(file.exists()){
			try{
				load(new FileReader(file));
			}catch(FileNotFoundException e){
				throw new RuntimeException(e);
			}
		}
	}
	public WorkspaceMappingInfo(Reader reader){
		this();
		if(reader != null){
			load(reader);
		}
	}
	private void load(Reader reader){
		try{
			if(reader != null){
				final String CURRENT_VERSION = getClass().getName() + ".currentVersion";
				final String CURRENT_REVISION = getClass().getName() + ".currentRevision";
				final String NAKED_UML_MAX_VALUE = getClass().getName() + ".nakedUmlIdMaxValue";
				Set<String> knownProperties = new HashSet<String>();
				knownProperties.add(CURRENT_VERSION);
				knownProperties.add(CURRENT_REVISION);
				knownProperties.add(NAKED_UML_MAX_VALUE);
				properties.load(reader);
				currentVersion = DECIMAL_FORMAT.parse(properties.getProperty(CURRENT_VERSION)).floatValue();
				currentRevision = Integer.parseInt(properties.getProperty(CURRENT_REVISION));
				nakedUmlIdMaxValue = Integer.parseInt(properties.getProperty(NAKED_UML_MAX_VALUE));
				Set<Entry<Object,Object>> entrySet = properties.entrySet();
				for(Entry<Object,Object> entry:entrySet){
					String id = (String) entry.getKey();
					if(!knownProperties.contains(id)){
						mappingInfoMap.put(id, new MappingInfo(id, (String) entry.getValue()));
					}
				}
			}
		}catch(RuntimeException r){
			throw r;
		}catch(Exception e){
			throw new RuntimeException(e);
		}
	}
	public MappingInfo getMappingInfo(String modelId,boolean store){
		MappingInfo mappingInfo = (MappingInfo) this.mappingInfoMap.get(modelId);
		if(mappingInfo == null){
			mappingInfo = new MappingInfo();
			if(store){
				this.nakedUmlIdMaxValue++;
				mappingInfo.setNakedUmlId(this.nakedUmlIdMaxValue);
			}else{
				mappingInfo.setNakedUmlId(Math.abs(this.nakedUmlIdMaxValue+1000+random.nextInt()));
			}
			mappingInfo.setStore(store);
			mappingInfo.setIdInModel(modelId);
			mappingInfo.setSinceRevision(currentRevision);
			mappingInfo.setSinceVersion(currentVersion);
			this.mappingInfoMap.put(mappingInfo.getIdInModel(), mappingInfo);
		}
		return mappingInfo;
	}
	public void store(){
		Writer writer;
		try{
			writer = new FileWriter(file);
		}catch(IOException e){
			throw new RuntimeException(e);
		}
		store(writer);
	}
	public void store(Writer writer){
		try{
			properties.put(getClass().getName() + ".currentVersion", DECIMAL_FORMAT.format(currentVersion));
			properties.put(getClass().getName() + ".nakedUmlIdMaxValue", "" + nakedUmlIdMaxValue);
			properties.put(getClass().getName() + ".currentRevision", "" + currentRevision);
			Set<Entry<String,MappingInfo>> entrySet = mappingInfoMap.entrySet();
			for(Entry<String,MappingInfo> entry:entrySet){
				String id = (String) entry.getKey();
				if(entry.getValue().shouldStore()){
					properties.put(id, entry.getValue().toString());
				}
			}
			properties.store(writer, "Generated by NakedUML");
		}catch(RuntimeException e){
			throw e;
		}catch(Exception e){
			throw new RuntimeException(e);
		}
	}
	public void incrementRevision(){
		currentRevision++;
	}
	public int getCurrentRevision(){
		return currentRevision;
	}
	public void setCurrentRevision(int currentRevision){
		this.currentRevision = currentRevision;
	}
	public float getCurrentVersion(){
		return currentVersion;
	}
	public void setCurrentVersion(float currentVersion){
		this.currentVersion = currentVersion;
	}
	public int getNakedUmlIdMaxValue(){
		return this.nakedUmlIdMaxValue;
	}
	public void removeMappingInfo(String id){
		properties.remove(id);
	}
}
