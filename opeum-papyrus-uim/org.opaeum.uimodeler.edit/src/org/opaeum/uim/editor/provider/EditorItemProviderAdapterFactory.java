/**
 */
package org.opaeum.uim.editor.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.opaeum.uim.editor.util.EditorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EditorItemProviderAdapterFactory extends EditorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EditorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.AbstractEditor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractEditorItemProvider abstractEditorItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.AbstractEditor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractEditorAdapter() {
		if (abstractEditorItemProvider == null) {
			abstractEditorItemProvider = new AbstractEditorItemProvider(this);
		}

		return abstractEditorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.ActionTaskEditor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionTaskEditorItemProvider actionTaskEditorItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.ActionTaskEditor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionTaskEditorAdapter() {
		if (actionTaskEditorItemProvider == null) {
			actionTaskEditorItemProvider = new ActionTaskEditorItemProvider(this);
		}

		return actionTaskEditorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.ClassEditor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassEditorItemProvider classEditorItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.ClassEditor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassEditorAdapter() {
		if (classEditorItemProvider == null) {
			classEditorItemProvider = new ClassEditorItemProvider(this);
		}

		return classEditorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.ResponsibilityTaskEditor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponsibilityTaskEditorItemProvider responsibilityTaskEditorItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.ResponsibilityTaskEditor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponsibilityTaskEditorAdapter() {
		if (responsibilityTaskEditorItemProvider == null) {
			responsibilityTaskEditorItemProvider = new ResponsibilityTaskEditorItemProvider(this);
		}

		return responsibilityTaskEditorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.QueryInvocationEditor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryInvocationEditorItemProvider queryInvocationEditorItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.QueryInvocationEditor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryInvocationEditorAdapter() {
		if (queryInvocationEditorItemProvider == null) {
			queryInvocationEditorItemProvider = new QueryInvocationEditorItemProvider(this);
		}

		return queryInvocationEditorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.EditorPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditorPageItemProvider editorPageItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.EditorPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditorPageAdapter() {
		if (editorPageItemProvider == null) {
			editorPageItemProvider = new EditorPageItemProvider(this);
		}

		return editorPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.EditorActionBar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditorActionBarItemProvider editorActionBarItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.EditorActionBar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditorActionBarAdapter() {
		if (editorActionBarItemProvider == null) {
			editorActionBarItemProvider = new EditorActionBarItemProvider(this);
		}

		return editorActionBarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.MenuConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuConfigurationItemProvider menuConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.MenuConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuConfigurationAdapter() {
		if (menuConfigurationItemProvider == null) {
			menuConfigurationItemProvider = new MenuConfigurationItemProvider(this);
		}

		return menuConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.editor.VisibleOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisibleOperationItemProvider visibleOperationItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.editor.VisibleOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisibleOperationAdapter() {
		if (visibleOperationItemProvider == null) {
			visibleOperationItemProvider = new VisibleOperationItemProvider(this);
		}

		return visibleOperationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (abstractEditorItemProvider != null) abstractEditorItemProvider.dispose();
		if (actionTaskEditorItemProvider != null) actionTaskEditorItemProvider.dispose();
		if (classEditorItemProvider != null) classEditorItemProvider.dispose();
		if (responsibilityTaskEditorItemProvider != null) responsibilityTaskEditorItemProvider.dispose();
		if (queryInvocationEditorItemProvider != null) queryInvocationEditorItemProvider.dispose();
		if (editorPageItemProvider != null) editorPageItemProvider.dispose();
		if (editorActionBarItemProvider != null) editorActionBarItemProvider.dispose();
		if (menuConfigurationItemProvider != null) menuConfigurationItemProvider.dispose();
		if (visibleOperationItemProvider != null) visibleOperationItemProvider.dispose();
	}

}
