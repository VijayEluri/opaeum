/**
 */
package org.opaeum.uim.control.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.opaeum.uim.control.util.ControlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ControlItemProviderAdapterFactory extends ControlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ControlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimNumberScroller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimNumberScrollerItemProvider uimNumberScrollerItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimNumberScroller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimNumberScrollerAdapter() {
		if (uimNumberScrollerItemProvider == null) {
			uimNumberScrollerItemProvider = new UimNumberScrollerItemProvider(this);
		}

		return uimNumberScrollerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimToggleButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimToggleButtonItemProvider uimToggleButtonItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimToggleButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimToggleButtonAdapter() {
		if (uimToggleButtonItemProvider == null) {
			uimToggleButtonItemProvider = new UimToggleButtonItemProvider(this);
		}

		return uimToggleButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimPopupSearch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimPopupSearchItemProvider uimPopupSearchItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimPopupSearch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimPopupSearchAdapter() {
		if (uimPopupSearchItemProvider == null) {
			uimPopupSearchItemProvider = new UimPopupSearchItemProvider(this);
		}

		return uimPopupSearchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimDropdown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDropdownItemProvider uimDropdownItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimDropdown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDropdownAdapter() {
		if (uimDropdownItemProvider == null) {
			uimDropdownItemProvider = new UimDropdownItemProvider(this);
		}

		return uimDropdownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimCheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimCheckBoxItemProvider uimCheckBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimCheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimCheckBoxAdapter() {
		if (uimCheckBoxItemProvider == null) {
			uimCheckBoxItemProvider = new UimCheckBoxItemProvider(this);
		}

		return uimCheckBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimLookup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimLookupItemProvider uimLookupItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimLookup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimLookupAdapter() {
		if (uimLookupItemProvider == null) {
			uimLookupItemProvider = new UimLookupItemProvider(this);
		}

		return uimLookupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimTextArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTextAreaItemProvider uimTextAreaItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimTextArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTextAreaAdapter() {
		if (uimTextAreaItemProvider == null) {
			uimTextAreaItemProvider = new UimTextAreaItemProvider(this);
		}

		return uimTextAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTextItemProvider uimTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTextAdapter() {
		if (uimTextItemProvider == null) {
			uimTextItemProvider = new UimTextItemProvider(this);
		}

		return uimTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimDatePopup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDatePopupItemProvider uimDatePopupItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimDatePopup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDatePopupAdapter() {
		if (uimDatePopupItemProvider == null) {
			uimDatePopupItemProvider = new UimDatePopupItemProvider(this);
		}

		return uimDatePopupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimListBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimListBoxItemProvider uimListBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimListBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimListBoxAdapter() {
		if (uimListBoxItemProvider == null) {
			uimListBoxItemProvider = new UimListBoxItemProvider(this);
		}

		return uimListBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimControlItemProvider uimControlItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimControlAdapter() {
		if (uimControlItemProvider == null) {
			uimControlItemProvider = new UimControlItemProvider(this);
		}

		return uimControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimTreeView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimTreeViewItemProvider uimTreeViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimTreeView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimTreeViewAdapter() {
		if (uimTreeViewItemProvider == null) {
			uimTreeViewItemProvider = new UimTreeViewItemProvider(this);
		}

		return uimTreeViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimLinkControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimLinkControlItemProvider uimLinkControlItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimLinkControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimLinkControlAdapter() {
		if (uimLinkControlItemProvider == null) {
			uimLinkControlItemProvider = new UimLinkControlItemProvider(this);
		}

		return uimLinkControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimDateScroller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDateScrollerItemProvider uimDateScrollerItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimDateScroller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDateScrollerAdapter() {
		if (uimDateScrollerItemProvider == null) {
			uimDateScrollerItemProvider = new UimDateScrollerItemProvider(this);
		}

		return uimDateScrollerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimSelectionTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimSelectionTableItemProvider uimSelectionTableItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimSelectionTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimSelectionTableAdapter() {
		if (uimSelectionTableItemProvider == null) {
			uimSelectionTableItemProvider = new UimSelectionTableItemProvider(this);
		}

		return uimSelectionTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimRadioButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimRadioButtonItemProvider uimRadioButtonItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimRadioButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimRadioButtonAdapter() {
		if (uimRadioButtonItemProvider == null) {
			uimRadioButtonItemProvider = new UimRadioButtonItemProvider(this);
		}

		return uimRadioButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimLabelItemProvider uimLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimLabelAdapter() {
		if (uimLabelItemProvider == null) {
			uimLabelItemProvider = new UimLabelItemProvider(this);
		}

		return uimLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.uim.control.UimDateTimePopup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UimDateTimePopupItemProvider uimDateTimePopupItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.uim.control.UimDateTimePopup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUimDateTimePopupAdapter() {
		if (uimDateTimePopupItemProvider == null) {
			uimDateTimePopupItemProvider = new UimDateTimePopupItemProvider(this);
		}

		return uimDateTimePopupItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (uimNumberScrollerItemProvider != null) uimNumberScrollerItemProvider.dispose();
		if (uimToggleButtonItemProvider != null) uimToggleButtonItemProvider.dispose();
		if (uimPopupSearchItemProvider != null) uimPopupSearchItemProvider.dispose();
		if (uimDropdownItemProvider != null) uimDropdownItemProvider.dispose();
		if (uimCheckBoxItemProvider != null) uimCheckBoxItemProvider.dispose();
		if (uimLookupItemProvider != null) uimLookupItemProvider.dispose();
		if (uimTextAreaItemProvider != null) uimTextAreaItemProvider.dispose();
		if (uimTextItemProvider != null) uimTextItemProvider.dispose();
		if (uimDatePopupItemProvider != null) uimDatePopupItemProvider.dispose();
		if (uimListBoxItemProvider != null) uimListBoxItemProvider.dispose();
		if (uimControlItemProvider != null) uimControlItemProvider.dispose();
		if (uimTreeViewItemProvider != null) uimTreeViewItemProvider.dispose();
		if (uimLinkControlItemProvider != null) uimLinkControlItemProvider.dispose();
		if (uimDateScrollerItemProvider != null) uimDateScrollerItemProvider.dispose();
		if (uimSelectionTableItemProvider != null) uimSelectionTableItemProvider.dispose();
		if (uimRadioButtonItemProvider != null) uimRadioButtonItemProvider.dispose();
		if (uimLabelItemProvider != null) uimLabelItemProvider.dispose();
		if (uimDateTimePopupItemProvider != null) uimDateTimePopupItemProvider.dispose();
	}

}
