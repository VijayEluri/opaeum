/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.opeum.bpmn2.modeleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.bpmn2.di.util.BpmnDiAdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class BpmnDiModelerProviderAdapterFactory extends BpmnDiAdapterFactory implements ComposeableAdapterFactory,IChangeNotifier,IDisposable{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.di.DocumentRoot} instances.
	 * 
	 * @generated
	 */
	private DocumentRootModelerProvider documentrootModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.di.BPMNDiagram} instances.
	 * 
	 * @generated
	 */
	private BPMNDiagramModelerProvider bpmndiagramModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.di.BPMNEdge} instances.
	 * 
	 * @generated
	 */
	private BPMNEdgeModelerProvider bpmnedgeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.di.BPMNLabel} instances.
	 * 
	 * @generated
	 */
	private BPMNLabelModelerProvider bpmnlabelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.di.BPMNLabelStyle} instances.
	 * 
	 * @generated
	 */
	private BPMNLabelStyleModelerProvider bpmnlabelstyleModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.di.BPMNPlane} instances.
	 * 
	 * @generated
	 */
	private BPMNPlaneModelerProvider bpmnplaneModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.di.BPMNShape} instances.
	 * 
	 * @generated
	 */
	private BPMNShapeModelerProvider bpmnshapeModelerProvider;
	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public BpmnDiModelerProviderAdapterFactory(){
		supportedTypes.add(ILabelFeatureProvider.class);
	}
	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory(){
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}
	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory){
		this.parentAdapterFactory = parentAdapterFactory;
	}
	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type){
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}
	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier,Object type){
		return super.adapt(notifier, this);
	}
	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object,Object type){
		if(isFactoryForType(type)){
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class) || (((Class) type).isInstance(adapter))){
				return adapter;
			}
		}
		return null;
	}
	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.addListener(notifyChangedListener);
	}
	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.removeListener(notifyChangedListener);
	}
	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification){
		changeNotifier.fireNotifyChanged(notification);
		if(parentAdapterFactory != null){
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.di.DocumentRoot}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDocumentRootAdapter(){
		if(documentrootModelerProvider == null){
			documentrootModelerProvider = new DocumentRootModelerProvider(this);
		}
		return documentrootModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.di.BPMNDiagram}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBPMNDiagramAdapter(){
		if(bpmndiagramModelerProvider == null){
			bpmndiagramModelerProvider = new BPMNDiagramModelerProvider(this);
		}
		return bpmndiagramModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.di.BPMNEdge}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBPMNEdgeAdapter(){
		if(bpmnedgeModelerProvider == null){
			bpmnedgeModelerProvider = new BPMNEdgeModelerProvider(this);
		}
		return bpmnedgeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.di.BPMNLabel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBPMNLabelAdapter(){
		if(bpmnlabelModelerProvider == null){
			bpmnlabelModelerProvider = new BPMNLabelModelerProvider(this);
		}
		return bpmnlabelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.di.BPMNLabelStyle}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBPMNLabelStyleAdapter(){
		if(bpmnlabelstyleModelerProvider == null){
			bpmnlabelstyleModelerProvider = new BPMNLabelStyleModelerProvider(this);
		}
		return bpmnlabelstyleModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.di.BPMNPlane}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBPMNPlaneAdapter(){
		if(bpmnplaneModelerProvider == null){
			bpmnplaneModelerProvider = new BPMNPlaneModelerProvider(this);
		}
		return bpmnplaneModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.di.BPMNShape}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBPMNShapeAdapter(){
		if(bpmnshapeModelerProvider == null){
			bpmnshapeModelerProvider = new BPMNShapeModelerProvider(this);
		}
		return bpmnshapeModelerProvider;
	}
	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose(){
		if(documentrootModelerProvider != null){
			documentrootModelerProvider.dispose();
		}
		if(bpmndiagramModelerProvider != null){
			bpmndiagramModelerProvider.dispose();
		}
		if(bpmnedgeModelerProvider != null){
			bpmnedgeModelerProvider.dispose();
		}
		if(bpmnlabelModelerProvider != null){
			bpmnlabelModelerProvider.dispose();
		}
		if(bpmnlabelstyleModelerProvider != null){
			bpmnlabelstyleModelerProvider.dispose();
		}
		if(bpmnplaneModelerProvider != null){
			bpmnplaneModelerProvider.dispose();
		}
		if(bpmnshapeModelerProvider != null){
			bpmnshapeModelerProvider.dispose();
		}
	}
}
