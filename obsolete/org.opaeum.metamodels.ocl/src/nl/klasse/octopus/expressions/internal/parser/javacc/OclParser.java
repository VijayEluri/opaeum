/* Generated By:JavaCC: Do not edit this line. OclParser.java */
package nl.klasse.octopus.expressions.internal.parser.javacc;

import java.util.ArrayList;
import java.util.List;

import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedBooleanLiteral;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedBracketExp;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedCollectionLiteral;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedCollectionType;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedIfExpression;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedIterators;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedLetExp;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedLiteral;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedMessageExp;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedName;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedNumericLiteral;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedOclExpression;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedOclUndefinedLiteral;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedOperDefinition;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedPropertyCallExp;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedRange;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedSimpleType;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedStringLiteral;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedTupleLiteral;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedTupleType;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedType;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedUnspecifiedValue;
import nl.klasse.octopus.expressions.internal.parser.parsetree.ParsedVariableDeclaration;
import nl.klasse.octopus.expressions.internal.parser.parsetree.context.ParsedOclAttributeContext;
import nl.klasse.octopus.expressions.internal.parser.parsetree.context.ParsedOclClassContext;
import nl.klasse.octopus.expressions.internal.parser.parsetree.context.ParsedOclContext;
import nl.klasse.octopus.expressions.internal.parser.parsetree.context.ParsedOclFile;
import nl.klasse.octopus.expressions.internal.parser.parsetree.context.ParsedOclOperationContext;
import nl.klasse.octopus.expressions.internal.parser.parsetree.context.ParsedOclUsage;


/* $Id: OclParser.java,v 1.1 2006/08/27 11:16:50 jwarmer Exp $
 */
public class OclParser implements OclParserConstants {

/*********************************************************************
 *
 * The main starting point for each OclExpression.
 *  The 'source' that starts each OclPropertyCallExp has been removed to avoid left recursion.
 *  As a consequence, OclPropertyCallExp is now postfixed to the OclExpression non-terminal.
 *  In this way each type of OclExpression is allowed to prefix an OclPropertyCallExp.
 *
 *********************************************************************/
  final public ParsedOclExpression OclExpression() throws ParseException {
    ParsedName            propName = null;
    ParsedPropertyCallExp p        = null;
    ParsedOclExpression   result   = null;
    ParsedLetExp          letExp   = null;
    List                  args     = null;
    boolean               pre      = false;
    boolean               first    = true;
    ParsedOclExpression   last     = null;
    ParsedOclExpression   tmp      = null;
    ParsedLiteral         literal  = null;
    ParsedIfExpression    ifExp    = null;
    ParsedName            unary    = null;
    Token                 head     = null;
    Token                 tail     = null;
    ParsedMessageExp      msg      = null;
    if (jj_2_1(2)) {
      literal = LiteralExp();
          result = literal; last = literal;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OCLSTRING:
        propName = oclName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          pre = isMarkedPre();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          jj_consume_token(BRACKET_OPEN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case LET:
          case TUPLE:
          case TRUE:
          case FALSE:
          case OCLUNDEFINED:
          case NOT:
          case MINUS:
          case UNSPECIFIED:
          case BRACKET_OPEN:
          case OCLSTRING:
          case NUMBERLITERAL:
          case STRINGLITERAL:
            args = arguments();
            break;
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          tail = jj_consume_token(BRACKET_CLOSE);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
          p = new ParsedPropertyCallExp( propName, pre, null, args);
          p.setPropertyKind(ParsedPropertyCallExp.NO_SOURCE);
          p.startAt( propName.getStart() );
          if( tail == null ){
              p.endAt( propName.getEnd() );
          } else {
              p.setBrackets(true);
              p.endAt(tail);
          }
          result = p;
          last   = result;
        break;
      case BRACKET_OPEN:
        head = jj_consume_token(BRACKET_OPEN);
        tmp = OclExpression();
        tail = jj_consume_token(BRACKET_CLOSE);
          result = new ParsedBracketExp( tmp);
          result.startAt(head);
          result.endAt  (tail);
          last = result;
        break;
      case NOT:
      case MINUS:
        unary = unaryOperator();
        result = OclExpression();
          p = new ParsedPropertyCallExp( unary, pre, null, args);
          p.setPropertyKind(ParsedPropertyCallExp.UNARY_OPERATOR);
          p.setAppliedProperty(result.getAppliedProperty() );
          p.startAt( unary.getStart() );
          p.endAt  ( result.getEnd()  );

          result.setAppliedProperty(p);
          last = result.getLastAppliedProperty();
        break;
      case LET:
        letExp = LetExpression();
          result = letExp; last = letExp;
        break;
      case IF:
        result = IfExpression();
            last = result;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case XOR:
      case IMPLIES:
      case DOT:
      case ARROW:
      case DOUBLEDAKJE:
      case DAKJE:
      case LESS:
      case GT:
      case LESSEQ:
      case GTEQ:
      case EQUALS:
      case NOTEQUALS:
      case PLUS:
      case MINUS:
      case DIVIDE:
      case MULTIPLY:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case XOR:
      case IMPLIES:
      case DOT:
      case ARROW:
      case LESS:
      case GT:
      case LESSEQ:
      case GTEQ:
      case EQUALS:
      case NOTEQUALS:
      case PLUS:
      case MINUS:
      case DIVIDE:
      case MULTIPLY:
        p = PropertyCallExp();
               last.setAppliedProperty(p); last = p;
        break;
      case DOUBLEDAKJE:
      case DAKJE:
        msg = MessageExp();
               msg.setTarget(result);
               result = msg;
               last   = msg;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** Any parsed name may be prefixed by "<name> ::" many times.
 */
  final public ParsedName oclName() throws ParseException {
    Token      head = null;
    Token      tail = null;
    Token      rolename = null;
    ParsedName result;
    head = jj_consume_token(OCLSTRING);
                                             result = new ParsedName(head);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLECOLON:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(DOUBLECOLON);
      tail = jj_consume_token(OCLSTRING);
                                             result.addToken( tail );
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRAIGHT_OPEN:
      jj_consume_token(STRAIGHT_OPEN);
      rolename = jj_consume_token(OCLSTRING);
      jj_consume_token(STRAIGHT_CLOSE);
          result.setRolename(rolename);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
      result.startAt(head);
      if( tail == null ){
          result.endAt(head);
      } else {
          result.endAt(tail);
      }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** A simple name.
 */
  final public String simpleOclName() throws ParseException {
    Token  t;
    t = jj_consume_token(OCLSTRING);
      {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/** Enumerationms are ParsedPropertyCallExps, because their names are not fixed.
 *  CS: [A] EnumLiteralExp is done in OclExpression
 *      [D] PrimitiveLiteralExp ; [C] TupleLiteralExp ; [B] CollectionLiteralExp
 */
  final public ParsedLiteral LiteralExp() throws ParseException {
  Token         t;
  ParsedLiteral result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRINGLITERAL:
      t = jj_consume_token(STRINGLITERAL);
                              result = new ParsedStringLiteral (t.image);
                              result.startAt(t); result.endAt(t);
      break;
    case NUMBERLITERAL:
      t = jj_consume_token(NUMBERLITERAL);
                              result = new ParsedNumericLiteral(t.image);
                              result.startAt(t); result.endAt(t);
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                              result = new ParsedBooleanLiteral(t.image);
                              result.startAt(t); result.endAt(t);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                              result = new ParsedBooleanLiteral(t.image);
                              result.startAt(t); result.endAt(t);
      break;
    case OCLUNDEFINED:
      t = jj_consume_token(OCLUNDEFINED);
                              result = new ParsedOclUndefinedLiteral(t.image);
                              result.startAt(t); result.endAt(t);
      break;
    case TUPLE:
      result = TupleLiteralExp();
      break;
    case OCLSTRING:
      result = CollectionLiteralExp();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** A variabledeclaration with optional initialization
 */
  final public ParsedVariableDeclaration VariableDeclaration() throws ParseException {
    ParsedName                varName = null;
    ParsedType                type    = null;
    ParsedOclExpression       init    = null;
    ParsedVariableDeclaration result  = null;
    varName = oclName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      type = type();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      init = OclExpression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
      result = new ParsedVariableDeclaration(varName, type, init);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** 
 */
  final public ParsedType type() throws ParseException {
    ParsedName typeName = null;
    ParsedType result = null;
    if (getToken(1).image.equals("TupleType")) {
      result = tupleType();
    } else if (jj_2_2(2147483647)) {
      result = collectionType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OCLSTRING:
        typeName = oclName();
                               result = new ParsedSimpleType(typeName);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedCollectionType collectionType() throws ParseException {
    ParsedCollectionType  result      = null;
    ParsedType            elementType = null;
    Token                 head        = null;
    Token                 tail        = null;
    head = jj_consume_token(OCLSTRING);
    jj_consume_token(BRACKET_OPEN);
    elementType = type();
    tail = jj_consume_token(BRACKET_CLOSE);
      result = new ParsedCollectionType(head.image, elementType);
      result.startAt(head);
      result.endAt  (tail);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** Parses a tuple type.
 */
  final public ParsedTupleType tupleType() throws ParseException {
    ParsedTupleType  result   = null;
    List             varDecls = null;
    Token            head     = null;
    Token            tail     = null;
    head = jj_consume_token(OCLSTRING);
    jj_consume_token(BRACKET_OPEN);
    varDecls = variableDeclarationList();
    tail = jj_consume_token(BRACKET_CLOSE);
      result = new ParsedTupleType(varDecls);
      result.startAt(head);
      result.endAt  (tail);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** Parses an OclMessage
 */
  final public ParsedMessageExp MessageExp() throws ParseException {
    ParsedMessageExp          result         = null;
    ParsedName                propName       = null;
    List                      args           = null;
    Token                     start          = null;
    Token                     tail           = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DAKJE:
      start = jj_consume_token(DAKJE);
      break;
    case DOUBLEDAKJE:
      start = jj_consume_token(DOUBLEDAKJE);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    propName = oclName();
    jj_consume_token(BRACKET_OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case LET:
    case TUPLE:
    case TRUE:
    case FALSE:
    case OCLUNDEFINED:
    case NOT:
    case MINUS:
    case UNSPECIFIED:
    case BRACKET_OPEN:
    case OCLSTRING:
    case NUMBERLITERAL:
    case STRINGLITERAL:
      args = arguments();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    tail = jj_consume_token(BRACKET_CLOSE);
      result = new ParsedMessageExp();
      result.setArguments(args);
      result.setPropertyName(propName) ;
      result.startAt(start);
      result.endAt  (tail );
      if( start.kind == DAKJE ){
            result.setMessageKind(ParsedMessageExp.DAKJE);
      } else { // start.kind == DOUBLEDAKJE
                result.setMessageKind(ParsedMessageExp.DOUBLE_DAKJE);
      }

      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** The PropertyCallExp combines all sub-types into one grammar rule.
 *  This is done because they are very similar to each other and can only be distinguished
 *  by a semantic check with the UML model. We therefore first parse everything as
 *  a ParsedPropertyCallExp and will perform the check in a second pass.
 *  <P> An added bonus is that error messages can be provided on a higher semantic level.
 */
  final public ParsedPropertyCallExp PropertyCallExp() throws ParseException {
    ParsedPropertyCallExp     result         = null;
    ParsedName                propName       = null;
    ParsedOclExpression       arg            = null;
    ParsedIterators           iterators      = null;
    List                      args           = null;
    boolean                   pre            = false;
    boolean                   isOperator     = false;
    Token                     start          = null;
    Token                     tail           = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
    case XOR:
    case IMPLIES:
    case LESS:
    case GT:
    case LESSEQ:
    case GTEQ:
    case EQUALS:
    case NOTEQUALS:
    case PLUS:
    case MINUS:
    case DIVIDE:
    case MULTIPLY:
      /*       Infix operators are all predefined.  During the first parse no priority is
       *       used. All operators are applied left-to right. In the second pass the parse
       *       tree needs to be re-arranged by applying the different operator-priorities.
       */
               propName = operator();
      arg = argument();
             args = new ArrayList(); args.add(arg); isOperator = true;
      break;
    case DOT:
    case ARROW:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW:
        start = jj_consume_token(ARROW);
        break;
      case DOT:
        start = jj_consume_token(DOT);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      propName = oclName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        pre = isMarkedPre();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_OPEN:
        if (jj_2_3(2147483647)) {
          jj_consume_token(BRACKET_OPEN);
          iterators = iterateDeclaration();
          jj_consume_token(BAR);
          arg = argument();
          tail = jj_consume_token(BRACKET_CLOSE);
                      args = new ArrayList(); args.add(arg);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BRACKET_OPEN:
            jj_consume_token(BRACKET_OPEN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
            case LET:
            case TUPLE:
            case TRUE:
            case FALSE:
            case OCLUNDEFINED:
            case NOT:
            case MINUS:
            case UNSPECIFIED:
            case BRACKET_OPEN:
            case OCLSTRING:
            case NUMBERLITERAL:
            case STRINGLITERAL:
              args = arguments();
              break;
            default:
              jj_la1[16] = jj_gen;
              ;
            }
            tail = jj_consume_token(BRACKET_CLOSE);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      result = new ParsedPropertyCallExp(propName, pre, iterators, args) ;
      if( isOperator ) { result.setPropertyKind(ParsedPropertyCallExp.BINARY_OPERATOR);  }
      else if( start.kind == ARROW      ) { result.setPropertyKind(ParsedPropertyCallExp.ARROW_CALL); }
      else if( start.kind == DOT        ) { result.setPropertyKind(ParsedPropertyCallExp.DOT_CALL); }

      if( isOperator ){
          result.startAt( propName.getStart() );
          result.endAt  ( arg.getEnd() );
      } else {
          result.startAt(start);
          if( tail == null ){
              result.endAt( propName.getEnd());
          } else {
              result.setBrackets(true);
              result.endAt  (  tail );
          }
      }

      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** iterate and iterator variables
 * Any number of iterator variables are allowes, although OCL 2.0 allow at most 2
 * This is to be checked in the semantics check.
 * the same holds for the fact whether the initial value is either disallowed or mandatory.
 */
  final public ParsedIterators iterateDeclaration() throws ParseException {
  ParsedIterators           result    = null;
  ParsedVariableDeclaration iter      = null;
  ParsedVariableDeclaration resultVar = null;
  List                      iterators = new ArrayList();
    iter = VariableDeclaration();
                                              iterators.add(iter);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      iter = VariableDeclaration();
                                                  iterators.add(iter);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      resultVar = VariableDeclaration();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
      result = new ParsedIterators(iterators, resultVar);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** The predefined infix operators
 */
  final public ParsedName operator() throws ParseException {
  ParsedName result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    case LESS:
      jj_consume_token(LESS);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case GTEQ:
      jj_consume_token(GTEQ);
      break;
    case LESSEQ:
      jj_consume_token(LESSEQ);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    case NOTEQUALS:
      jj_consume_token(NOTEQUALS);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case IMPLIES:
      jj_consume_token(IMPLIES);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      result = new ParsedName(token);
      result.startAt(token);
      result.endAt(token);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** The pre marker
 */
  final public boolean isMarkedPre() throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(PRE);
      {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

/** An argument list, existing of at least one element.
 */
  final public List arguments() throws ParseException {
    List                result = new ArrayList();
    ParsedOclExpression arg    = null;
    arg = argument();
                             result.add(arg);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      arg = argument();
                                 result.add(arg);
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** Exactly one argument.
 */
  final public ParsedOclExpression argument() throws ParseException {
                                  ParsedOclExpression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case LET:
    case TUPLE:
    case TRUE:
    case FALSE:
    case OCLUNDEFINED:
    case NOT:
    case MINUS:
    case BRACKET_OPEN:
    case OCLSTRING:
    case NUMBERLITERAL:
    case STRINGLITERAL:
      exp = OclExpression();
      break;
    case UNSPECIFIED:
      exp = UnspecifiedValueExp();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/** Unspecified Value
 */
  final public ParsedUnspecifiedValue UnspecifiedValueExp() throws ParseException {
    ParsedUnspecifiedValue result   = null;
    ParsedName             typeName = null;
    Token                  t        = null;
    t = jj_consume_token(UNSPECIFIED);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      typeName = oclName();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
      result = new ParsedUnspecifiedValue(typeName);
      result.startAt(t) ;
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** The Let expression.
 */
  final public ParsedLetExp LetExpression() throws ParseException {
    ParsedLetExp              result = null;
    List                      vars   = null;
    ParsedOclExpression       exp    = null;
    Token                     t      = null;
    t = jj_consume_token(LET);
    vars = variableDeclarationList();
    jj_consume_token(IN);
    exp = OclExpression();
      result = new ParsedLetExp(vars, exp);
      result.startAt(t);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** A list of variable declarations
 */
  final public List variableDeclarationList() throws ParseException {
  ParsedVariableDeclaration var;
  List                      result = new ArrayList();
    var = VariableDeclaration();
                                        result.add(var);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      var = VariableDeclaration();
                                            result.add(var);
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** If expression. As in OCL 2.0
 */
  final public ParsedIfExpression IfExpression() throws ParseException {
    ParsedOclExpression ifExp, elseExp, thenExp;
    Token ifToken, endToken;
    ParsedIfExpression result = null;
    ifToken = jj_consume_token(IF);
    ifExp = OclExpression();
    jj_consume_token(THEN);
    thenExp = OclExpression();
    jj_consume_token(ELSE);
    elseExp = OclExpression();
    endToken = jj_consume_token(ENDIF);
      result = new ParsedIfExpression(ifExp, thenExp, elseExp);
      result.startAt(ifToken);
      result.endAt(endToken);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** Collection literals
 */
  final public ParsedCollectionLiteral CollectionLiteralExp() throws ParseException {
  Token                   head   = null;
  Token                   tail   = null;
  ParsedCollectionLiteral result = null;
  List                    parts  = null;
    head = jj_consume_token(OCLSTRING);
    jj_consume_token(CURLY_OPEN);
    parts = CollectionLiteralParts();
    tail = jj_consume_token(CURLY_CLOSE);
       result = new ParsedCollectionLiteral(head.image, parts);
       result.startAt(head);
       result.endAt  (tail);
       {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public List CollectionLiteralParts() throws ParseException {
  ParsedOclExpression part   = null;
  List                result = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case LET:
    case TUPLE:
    case TRUE:
    case FALSE:
    case OCLUNDEFINED:
    case NOT:
    case MINUS:
    case BRACKET_OPEN:
    case OCLSTRING:
    case NUMBERLITERAL:
    case STRINGLITERAL:
      part = CollectionLiteralPart();
                                                 result.add(part);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      part = CollectionLiteralPart();
                                                   result.add(part);
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedOclExpression CollectionLiteralPart() throws ParseException {
    ParsedOclExpression first = null, second = null;
    first = OclExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RANGE:
      jj_consume_token(RANGE);
      second = OclExpression();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
      if( second == null ){
        {if (true) return first;}
      } else {
        {if (true) return new ParsedRange(first, second);}
      }
    throw new Error("Missing return statement in function");
  }

  final public ParsedTupleLiteral TupleLiteralExp() throws ParseException {
  List               varDecls = null;
  ParsedTupleLiteral result   = null;
  Token              head     = null;
  Token              tail     = null;
    head = jj_consume_token(TUPLE);
    jj_consume_token(CURLY_OPEN);
    varDecls = variableDeclarationList();
    tail = jj_consume_token(CURLY_CLOSE);
      result = new ParsedTupleLiteral(varDecls);
      result.startAt(head);
      result.endAt  (tail);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedName unaryOperator() throws ParseException {
   Token t;
   ParsedName result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      result = new ParsedName(token);
      result.startAt(t);
      result.endAt  (t);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/************************************************************
 *
 * Grammar rules for context declarations
 *
 ************************************************************/

/** The OCL file containing a number of expressions using the 'context' keyword.
 */
  final public ParsedOclFile oclFile(String filename) throws ParseException {
    ParsedOclFile result = new ParsedOclFile(filename);
    ParsedName pack = null;
    ParsedOclContext content = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE_START:
      jj_consume_token(PACKAGE_START);
      pack = oclName();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTEXT:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_7;
      }
      content = contextDeclaration();
          result.addContents(content);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE_END:
      jj_consume_token(PACKAGE_END);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(0);
                result.setPackageName(pack);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** The OCL constraints using the 'context' keyword.
 *  Doing a lot of lookahead to be able to make the right choice.
 */
  final public ParsedOclContext contextDeclaration() throws ParseException {
    ParsedOclContext context = null;
    if (jj_2_4(2147483647)) {
      context = classContext();
                {if (true) return context;}
    } else if (jj_2_5(2147483647)) {
      context = operationContext();
                {if (true) return context;}
    } else if (jj_2_6(2147483647)) {
      context = attributeContext();
                {if (true) return context;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** 'context' className ...
 */
  final public ParsedOclClassContext classContext() throws ParseException {
    ParsedName             className = null;
    ParsedOclClassContext  result = null;
    ParsedOclUsage                 exp = null;
    jj_consume_token(CONTEXT);
    className = oclName();
        result = new ParsedOclClassContext(className);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INV:
        exp = invInClassContext();
                                     result.addInvariant(exp);
        break;
      case DEF:
        exp = defInClassContext();
                                     result.addDefinition(exp);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INV:
      case DEF:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_8;
      }
    }
             result.startAt(className.getStart());
             result.endAt(className.getEnd());
             {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedOclUsage invInClassContext() throws ParseException {
    String name = "";
    ParsedOclExpression parsetree = null;
    ParsedOclUsage result    = null;
    Token      contextType;
    contextType = jj_consume_token(INV);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCLSTRING:
      name = simpleOclName();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    parsetree = OclExpression();
        result = new ParsedOclUsage();
        result.setName(name);
        result.setExpression(parsetree);
        result.setType(contextType);
        result.startAt(contextType);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedOclUsage defInClassContext() throws ParseException {
    String                                              name = "";
    ParsedOclExpression                 parsetree = null;
    ParsedOclUsage                              result    = null;
        ParsedVariableDeclaration       var       = null;
        ParsedOperDefinition            oper      = null;
    Token                                       contextType, end;
    contextType = jj_consume_token(DEF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCLSTRING:
      name = simpleOclName();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
        result = new ParsedOclUsage();
        result.setName(name);
        result.setType(contextType);
        result.startAt(contextType);
    if (jj_2_7(2147483647)) {
      oper = operationDefinition();
            result.setOperation(oper);
                result.setExpression(oper.getExpression());
//	        result.setType(oper.getStart());
//	        result.endAt(oper.getEnd());

    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OCLSTRING:
        var = attributeDefinition();
            result.setVariable(var);
                result.setExpression(var.getInitExpression());
                result.endAt(var.getEnd());
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedVariableDeclaration attributeDefinition() throws ParseException {
    ParsedName                varName = null;
    ParsedType                type    = null;
    ParsedOclExpression       init    = null;
    ParsedVariableDeclaration result  = null;
    varName = oclName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      type = type();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(EQUALS);
    init = OclExpression();
      result = new ParsedVariableDeclaration(varName, type, init);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** A single operation definition inside the 'oper' ...
*/
  final public ParsedOperDefinition operationDefinition() throws ParseException {
    ParsedOperDefinition result     = null;
    String               name       = null;
    List                 pars       = null;
    ParsedOclExpression  exp        = null;
    Token                start, end = null;
    ParsedType           returnType = null;
    name = simpleOclName();
    start = jj_consume_token(BRACKET_OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCLSTRING:
      pars = variableDeclarationList();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    end = jj_consume_token(BRACKET_CLOSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      returnType = type();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(EQUALS);
    exp = OclExpression();
      result = new ParsedOperDefinition(name, pars, returnType, exp);
      result.startAt(start);
      if( (returnType == null) && (exp == null) ){
          result.endAt(end);
      } else {
          result.endAt(end); //TBD: einde van returnType of exp nemen
      }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** 'context' className::attributeName ...
 */
  final public ParsedOclAttributeContext attributeContext() throws ParseException {
    ParsedName                  attributeName = null;
    ParsedOclAttributeContext   result = null;
    ParsedOclUsage                      exp = null;
    ParsedType                          type = null;
    jj_consume_token(CONTEXT);
    attributeName = oclName();
        result = new ParsedOclAttributeContext(attributeName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      type = type();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    label_9:
    while (true) {
      exp = expressionInAttributeContext();
                                             result.addExpression(exp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT:
      case DERIVE:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_9;
      }
    }
             result.startAt(attributeName.getStart());
             result.endAt(attributeName.getEnd());
             if ( type != null) {
                result.setType(type);
             }
             {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedOclUsage expressionInAttributeContext() throws ParseException {
    String                              name      = "";
    ParsedOclExpression parsetree = null;
    ParsedOclUsage              result    = null;
    Token                       contextType, end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INIT:
      contextType = jj_consume_token(INIT);
      break;
    case DERIVE:
      contextType = jj_consume_token(DERIVE);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCLSTRING:
      name = simpleOclName();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    end = jj_consume_token(COLON);
    parsetree = OclExpression();
        result = new ParsedOclUsage();
        result.setName(name);
        result.setExpression(parsetree);
        result.setType(contextType);
        result.startAt(contextType);
        result.endAt(end);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** 'context' className.operation ...
 */
  final public ParsedOclOperationContext operationContext() throws ParseException {
    ParsedName                  operationName = null;
    ParsedOclOperationContext   result            = null;
    List                                pars          = null;
    ParsedType                          returnType    = null;
    ParsedOclUsage                              exp               = null;
    Token                                               end;
    jj_consume_token(CONTEXT);
    operationName = oclName();
          result = new ParsedOclOperationContext(operationName);
    jj_consume_token(BRACKET_OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCLSTRING:
      pars = variableDeclarationList();
                                                       result.setPars(pars);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    end = jj_consume_token(BRACKET_CLOSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      returnType = type();
                                     result.setReturnType(returnType); end = returnType.getEnd();
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      exp = expressionInOperationContext();
                                            result.addExpression(exp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRE:
      case POST:
      case BODY:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_10;
      }
    }
         result.startAt(operationName.getStart());
         result.endAt(end);
             {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/* before adding bodyExpression */
  final public ParsedOclUsage expressionInOperationContext() throws ParseException {
    String name = "";
    ParsedOclExpression parsetree = null;
    ParsedOclUsage result    = null;
    Token      contextType, end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRE:
      contextType = jj_consume_token(PRE);
      break;
    case POST:
      contextType = jj_consume_token(POST);
      break;
    case BODY:
      contextType = jj_consume_token(BODY);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCLSTRING:
      name = simpleOclName();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    end = jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case LET:
    case TUPLE:
    case TRUE:
    case FALSE:
    case OCLUNDEFINED:
    case NOT:
    case MINUS:
    case BRACKET_OPEN:
    case OCLSTRING:
    case NUMBERLITERAL:
    case STRINGLITERAL:
      parsetree = OclExpression();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
        result = new ParsedOclUsage();
        result.setName(name);
        result.setExpression(parsetree);
        result.setType(contextType);
        result.startAt(contextType);
        result.endAt(end);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_3R_39() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(OCLSTRING)) return true;
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(UNSPECIFIED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(CONTEXT)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(OCLSTRING)) return true;
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(CONTEXT)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(BRACKET_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(CONTEXT)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).image.equals("TupleType");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(PRE)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(OCLUNDEFINED)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(NUMBERLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(STRINGLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(OCLSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(BAR)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(TUPLE)) return true;
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(CURLY_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(STRAIGHT_OPEN)) return true;
    if (jj_scan_token(OCLSTRING)) return true;
    if (jj_scan_token(STRAIGHT_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(DOUBLECOLON)) return true;
    if (jj_scan_token(OCLSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(OCLSTRING)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(RANGE)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    if (jj_3R_16()) return true;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_65()) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(OCLSTRING)) return true;
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(CURLY_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_49()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(BRACKET_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(ENDIF)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    if (jj_3R_16()) return true;
    if (jj_scan_token(BRACKET_OPEN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  public OclParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x8ec400,0x0,0x804400,0xe9700000,0xe9700000,0x0,0x0,0xe8000,0x0,0x0,0x0,0xc0000000,0x8ec400,0x28000000,0x0,0x8ec400,0x0,0x0,0x29700000,0x0,0x0,0x1700000,0x0,0x8ec400,0x0,0x0,0x8ec400,0x0,0x10000000,0x800000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8ec400,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x200000,0x8880,0x8000,0x8080,0x3ff,0x3ff,0x400,0x80000,0x0,0x1000,0x10,0x0,0x0,0x8880,0x0,0x200000,0x8880,0x8000,0x8000,0x3ff,0x400000,0x2000,0x3ff,0x400000,0x8880,0x1000,0x400000,0x8080,0x400000,0x0,0x80,0x2000000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x1000,0x1000,0x18000000,0x18000000,0x0,0x0,0x1000,0xe0000000,0xe0000000,0x0,0x8080,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x1c,0x0,0x4,0x0,0x0,0x0,0x0,0x1c,0x0,0x0,0x4,0x0,0x1c,0x0,0x0,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c,0x0,0x0,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x4,0x4,0x4,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x4,0x1c,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public OclParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OclParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OclParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OclParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OclParser(OclParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(OclParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L; }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[70];
    for (int i = 0; i < 70; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
