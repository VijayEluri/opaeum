/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.opaeum.bpmn2.modeleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.dd.di.util.DiAdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class DiModelerProviderAdapterFactory extends DiAdapterFactory implements ComposeableAdapterFactory,IChangeNotifier,IDisposable{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.DocumentRoot} instances.
	 * 
	 * @generated
	 */
	private DocumentRootModelerProvider documentrootModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.Diagram} instances.
	 * 
	 * @generated
	 */
	private DiagramModelerProvider diagramModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.DiagramElement} instances.
	 * 
	 * @generated
	 */
	private DiagramElementModelerProvider diagramelementModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.Edge} instances.
	 * 
	 * @generated
	 */
	private EdgeModelerProvider edgeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.Label} instances.
	 * 
	 * @generated
	 */
	private LabelModelerProvider labelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.LabeledEdge} instances.
	 * 
	 * @generated
	 */
	private LabeledEdgeModelerProvider labelededgeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.LabeledShape} instances.
	 * 
	 * @generated
	 */
	private LabeledShapeModelerProvider labeledshapeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.Node} instances.
	 * 
	 * @generated
	 */
	private NodeModelerProvider nodeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.Plane} instances.
	 * 
	 * @generated
	 */
	private PlaneModelerProvider planeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.Shape} instances.
	 * 
	 * @generated
	 */
	private ShapeModelerProvider shapeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.dd.di.Style} instances.
	 * 
	 * @generated
	 */
	private StyleModelerProvider styleModelerProvider;
	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public DiModelerProviderAdapterFactory(){
		supportedTypes.add(ILabelFeatureProvider.class);
	}
	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory(){
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}
	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory){
		this.parentAdapterFactory = parentAdapterFactory;
	}
	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type){
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}
	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier,Object type){
		return super.adapt(notifier, this);
	}
	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object,Object type){
		if(isFactoryForType(type)){
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class) || (((Class) type).isInstance(adapter))){
				return adapter;
			}
		}
		return null;
	}
	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.addListener(notifyChangedListener);
	}
	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.removeListener(notifyChangedListener);
	}
	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification){
		changeNotifier.fireNotifyChanged(notification);
		if(parentAdapterFactory != null){
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.DocumentRoot}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDocumentRootAdapter(){
		if(documentrootModelerProvider == null){
			documentrootModelerProvider = new DocumentRootModelerProvider(this);
		}
		return documentrootModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.Diagram}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDiagramAdapter(){
		if(diagramModelerProvider == null){
			diagramModelerProvider = new DiagramModelerProvider(this);
		}
		return diagramModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.DiagramElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDiagramElementAdapter(){
		if(diagramelementModelerProvider == null){
			diagramelementModelerProvider = new DiagramElementModelerProvider(this);
		}
		return diagramelementModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.Edge}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEdgeAdapter(){
		if(edgeModelerProvider == null){
			edgeModelerProvider = new EdgeModelerProvider(this);
		}
		return edgeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.Label}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLabelAdapter(){
		if(labelModelerProvider == null){
			labelModelerProvider = new LabelModelerProvider(this);
		}
		return labelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.LabeledEdge}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLabeledEdgeAdapter(){
		if(labelededgeModelerProvider == null){
			labelededgeModelerProvider = new LabeledEdgeModelerProvider(this);
		}
		return labelededgeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.LabeledShape}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLabeledShapeAdapter(){
		if(labeledshapeModelerProvider == null){
			labeledshapeModelerProvider = new LabeledShapeModelerProvider(this);
		}
		return labeledshapeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.Node}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createNodeAdapter(){
		if(nodeModelerProvider == null){
			nodeModelerProvider = new NodeModelerProvider(this);
		}
		return nodeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.Plane}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPlaneAdapter(){
		if(planeModelerProvider == null){
			planeModelerProvider = new PlaneModelerProvider(this);
		}
		return planeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.Shape}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createShapeAdapter(){
		if(shapeModelerProvider == null){
			shapeModelerProvider = new ShapeModelerProvider(this);
		}
		return shapeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.dd.di.Style}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStyleAdapter(){
		if(styleModelerProvider == null){
			styleModelerProvider = new StyleModelerProvider(this);
		}
		return styleModelerProvider;
	}
	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose(){
		if(documentrootModelerProvider != null){
			documentrootModelerProvider.dispose();
		}
		if(diagramModelerProvider != null){
			diagramModelerProvider.dispose();
		}
		if(diagramelementModelerProvider != null){
			diagramelementModelerProvider.dispose();
		}
		if(edgeModelerProvider != null){
			edgeModelerProvider.dispose();
		}
		if(labelModelerProvider != null){
			labelModelerProvider.dispose();
		}
		if(labelededgeModelerProvider != null){
			labelededgeModelerProvider.dispose();
		}
		if(labeledshapeModelerProvider != null){
			labeledshapeModelerProvider.dispose();
		}
		if(nodeModelerProvider != null){
			nodeModelerProvider.dispose();
		}
		if(planeModelerProvider != null){
			planeModelerProvider.dispose();
		}
		if(shapeModelerProvider != null){
			shapeModelerProvider.dispose();
		}
		if(styleModelerProvider != null){
			styleModelerProvider.dispose();
		}
	}
}
