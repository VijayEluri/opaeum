/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.opaeum.bpmn2.modeleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.bpmn2.util.Bpmn2AdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class Bpmn2ModelerProviderAdapterFactory extends Bpmn2AdapterFactory implements ComposeableAdapterFactory,IChangeNotifier,IDisposable{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DocumentRoot} instances.
	 * 
	 * @generated
	 */
	private DocumentRootModelerProvider documentrootModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Activity} instances.
	 * 
	 * @generated
	 */
	private ActivityModelerProvider activityModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.AdHocSubProcess} instances.
	 * 
	 * @generated
	 */
	private AdHocSubProcessModelerProvider adhocsubprocessModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Artifact} instances.
	 * 
	 * @generated
	 */
	private ArtifactModelerProvider artifactModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Assignment} instances.
	 * 
	 * @generated
	 */
	private AssignmentModelerProvider assignmentModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Association} instances.
	 * 
	 * @generated
	 */
	private AssociationModelerProvider associationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Auditing} instances.
	 * 
	 * @generated
	 */
	private AuditingModelerProvider auditingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.BaseElement} instances.
	 * 
	 * @generated
	 */
	private BaseElementModelerProvider baseelementModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.BoundaryEvent} instances.
	 * 
	 * @generated
	 */
	private BoundaryEventModelerProvider boundaryeventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.BusinessRuleTask} instances.
	 * 
	 * @generated
	 */
	private BusinessRuleTaskModelerProvider businessruletaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CallActivity} instances.
	 * 
	 * @generated
	 */
	private CallActivityModelerProvider callactivityModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CallChoreography} instances.
	 * 
	 * @generated
	 */
	private CallChoreographyModelerProvider callchoreographyModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CallConversation} instances.
	 * 
	 * @generated
	 */
	private CallConversationModelerProvider callconversationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CallableElement} instances.
	 * 
	 * @generated
	 */
	private CallableElementModelerProvider callableelementModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CancelEventDefinition} instances.
	 * 
	 * @generated
	 */
	private CancelEventDefinitionModelerProvider canceleventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CatchEvent} instances.
	 * 
	 * @generated
	 */
	private CatchEventModelerProvider catcheventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Category} instances.
	 * 
	 * @generated
	 */
	private CategoryModelerProvider categoryModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CategoryValue} instances.
	 * 
	 * @generated
	 */
	private CategoryValueModelerProvider categoryvalueModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Choreography} instances.
	 * 
	 * @generated
	 */
	private ChoreographyModelerProvider choreographyModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ChoreographyActivity} instances.
	 * 
	 * @generated
	 */
	private ChoreographyActivityModelerProvider choreographyactivityModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ChoreographyTask} instances.
	 * 
	 * @generated
	 */
	private ChoreographyTaskModelerProvider choreographytaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Collaboration} instances.
	 * 
	 * @generated
	 */
	private CollaborationModelerProvider collaborationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CompensateEventDefinition} instances.
	 * 
	 * @generated
	 */
	private CompensateEventDefinitionModelerProvider compensateeventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ComplexBehaviorDefinition} instances.
	 * 
	 * @generated
	 */
	private ComplexBehaviorDefinitionModelerProvider complexbehaviordefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ComplexGateway} instances.
	 * 
	 * @generated
	 */
	private ComplexGatewayModelerProvider complexgatewayModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ConditionalEventDefinition} instances.
	 * 
	 * @generated
	 */
	private ConditionalEventDefinitionModelerProvider conditionaleventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Conversation} instances.
	 * 
	 * @generated
	 */
	private ConversationModelerProvider conversationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ConversationAssociation} instances.
	 * 
	 * @generated
	 */
	private ConversationAssociationModelerProvider conversationassociationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ConversationLink} instances.
	 * 
	 * @generated
	 */
	private ConversationLinkModelerProvider conversationlinkModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ConversationNode} instances.
	 * 
	 * @generated
	 */
	private ConversationNodeModelerProvider conversationnodeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CorrelationKey} instances.
	 * 
	 * @generated
	 */
	private CorrelationKeyModelerProvider correlationkeyModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CorrelationProperty} instances.
	 * 
	 * @generated
	 */
	private CorrelationPropertyModelerProvider correlationpropertyModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CorrelationPropertyBinding} instances.
	 * 
	 * @generated
	 */
	private CorrelationPropertyBindingModelerProvider correlationpropertybindingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CorrelationPropertyRetrievalExpression} instances.
	 * 
	 * @generated
	 */
	private CorrelationPropertyRetrievalExpressionModelerProvider correlationpropertyretrievalexpressionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.CorrelationSubscription} instances.
	 * 
	 * @generated
	 */
	private CorrelationSubscriptionModelerProvider correlationsubscriptionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataAssociation} instances.
	 * 
	 * @generated
	 */
	private DataAssociationModelerProvider dataassociationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataInput} instances.
	 * 
	 * @generated
	 */
	private DataInputModelerProvider datainputModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataInputAssociation} instances.
	 * 
	 * @generated
	 */
	private DataInputAssociationModelerProvider datainputassociationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataObject} instances.
	 * 
	 * @generated
	 */
	private DataObjectModelerProvider dataobjectModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataObjectReference} instances.
	 * 
	 * @generated
	 */
	private DataObjectReferenceModelerProvider dataobjectreferenceModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataOutput} instances.
	 * 
	 * @generated
	 */
	private DataOutputModelerProvider dataoutputModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataOutputAssociation} instances.
	 * 
	 * @generated
	 */
	private DataOutputAssociationModelerProvider dataoutputassociationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataState} instances.
	 * 
	 * @generated
	 */
	private DataStateModelerProvider datastateModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataStore} instances.
	 * 
	 * @generated
	 */
	private DataStoreModelerProvider datastoreModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.DataStoreReference} instances.
	 * 
	 * @generated
	 */
	private DataStoreReferenceModelerProvider datastorereferenceModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Definitions} instances.
	 * 
	 * @generated
	 */
	private DefinitionsModelerProvider definitionsModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Documentation} instances.
	 * 
	 * @generated
	 */
	private DocumentationModelerProvider documentationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.EndEvent} instances.
	 * 
	 * @generated
	 */
	private EndEventModelerProvider endeventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.EndPoint} instances.
	 * 
	 * @generated
	 */
	private EndPointModelerProvider endpointModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Error} instances.
	 * 
	 * @generated
	 */
	private ErrorModelerProvider errorModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ErrorEventDefinition} instances.
	 * 
	 * @generated
	 */
	private ErrorEventDefinitionModelerProvider erroreventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Escalation} instances.
	 * 
	 * @generated
	 */
	private EscalationModelerProvider escalationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.EscalationEventDefinition} instances.
	 * 
	 * @generated
	 */
	private EscalationEventDefinitionModelerProvider escalationeventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Event} instances.
	 * 
	 * @generated
	 */
	private EventModelerProvider eventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.EventBasedGateway} instances.
	 * 
	 * @generated
	 */
	private EventBasedGatewayModelerProvider eventbasedgatewayModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.EventDefinition} instances.
	 * 
	 * @generated
	 */
	private EventDefinitionModelerProvider eventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ExclusiveGateway} instances.
	 * 
	 * @generated
	 */
	private ExclusiveGatewayModelerProvider exclusivegatewayModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Expression} instances.
	 * 
	 * @generated
	 */
	private ExpressionModelerProvider expressionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Extension} instances.
	 * 
	 * @generated
	 */
	private ExtensionModelerProvider extensionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ExtensionAttributeDefinition} instances.
	 * 
	 * @generated
	 */
	private ExtensionAttributeDefinitionModelerProvider extensionattributedefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ExtensionAttributeValue} instances.
	 * 
	 * @generated
	 */
	private ExtensionAttributeValueModelerProvider extensionattributevalueModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ExtensionDefinition} instances.
	 * 
	 * @generated
	 */
	private ExtensionDefinitionModelerProvider extensiondefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.FlowElement} instances.
	 * 
	 * @generated
	 */
	private FlowElementModelerProvider flowelementModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.FlowElementsContainer} instances.
	 * 
	 * @generated
	 */
	private FlowElementsContainerModelerProvider flowelementscontainerModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.FlowNode} instances.
	 * 
	 * @generated
	 */
	private FlowNodeModelerProvider flownodeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.FormalExpression} instances.
	 * 
	 * @generated
	 */
	private FormalExpressionModelerProvider formalexpressionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Gateway} instances.
	 * 
	 * @generated
	 */
	private GatewayModelerProvider gatewayModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.GlobalBusinessRuleTask} instances.
	 * 
	 * @generated
	 */
	private GlobalBusinessRuleTaskModelerProvider globalbusinessruletaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.GlobalChoreographyTask} instances.
	 * 
	 * @generated
	 */
	private GlobalChoreographyTaskModelerProvider globalchoreographytaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.GlobalConversation} instances.
	 * 
	 * @generated
	 */
	private GlobalConversationModelerProvider globalconversationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.GlobalManualTask} instances.
	 * 
	 * @generated
	 */
	private GlobalManualTaskModelerProvider globalmanualtaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.GlobalScriptTask} instances.
	 * 
	 * @generated
	 */
	private GlobalScriptTaskModelerProvider globalscripttaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.GlobalTask} instances.
	 * 
	 * @generated
	 */
	private GlobalTaskModelerProvider globaltaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.GlobalUserTask} instances.
	 * 
	 * @generated
	 */
	private GlobalUserTaskModelerProvider globalusertaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Group} instances.
	 * 
	 * @generated
	 */
	private GroupModelerProvider groupModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.HumanPerformer} instances.
	 * 
	 * @generated
	 */
	private HumanPerformerModelerProvider humanperformerModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ImplicitThrowEvent} instances.
	 * 
	 * @generated
	 */
	private ImplicitThrowEventModelerProvider implicitthroweventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Import} instances.
	 * 
	 * @generated
	 */
	private ImportModelerProvider importModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.InclusiveGateway} instances.
	 * 
	 * @generated
	 */
	private InclusiveGatewayModelerProvider inclusivegatewayModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.InputOutputBinding} instances.
	 * 
	 * @generated
	 */
	private InputOutputBindingModelerProvider inputoutputbindingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.InputOutputSpecification} instances.
	 * 
	 * @generated
	 */
	private InputOutputSpecificationModelerProvider inputoutputspecificationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.InputSet} instances.
	 * 
	 * @generated
	 */
	private InputSetModelerProvider inputsetModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.InteractionNode} instances.
	 * 
	 * @generated
	 */
	private InteractionNodeModelerProvider interactionnodeModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Interface} instances.
	 * 
	 * @generated
	 */
	private InterfaceModelerProvider interfaceModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.IntermediateCatchEvent} instances.
	 * 
	 * @generated
	 */
	private IntermediateCatchEventModelerProvider intermediatecatcheventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.IntermediateThrowEvent} instances.
	 * 
	 * @generated
	 */
	private IntermediateThrowEventModelerProvider intermediatethroweventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ItemAwareElement} instances.
	 * 
	 * @generated
	 */
	private ItemAwareElementModelerProvider itemawareelementModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ItemDefinition} instances.
	 * 
	 * @generated
	 */
	private ItemDefinitionModelerProvider itemdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Lane} instances.
	 * 
	 * @generated
	 */
	private LaneModelerProvider laneModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.LaneSet} instances.
	 * 
	 * @generated
	 */
	private LaneSetModelerProvider lanesetModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.LinkEventDefinition} instances.
	 * 
	 * @generated
	 */
	private LinkEventDefinitionModelerProvider linkeventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.LoopCharacteristics} instances.
	 * 
	 * @generated
	 */
	private LoopCharacteristicsModelerProvider loopcharacteristicsModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ManualTask} instances.
	 * 
	 * @generated
	 */
	private ManualTaskModelerProvider manualtaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Message} instances.
	 * 
	 * @generated
	 */
	private MessageModelerProvider messageModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.MessageEventDefinition} instances.
	 * 
	 * @generated
	 */
	private MessageEventDefinitionModelerProvider messageeventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.MessageFlow} instances.
	 * 
	 * @generated
	 */
	private MessageFlowModelerProvider messageflowModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.MessageFlowAssociation} instances.
	 * 
	 * @generated
	 */
	private MessageFlowAssociationModelerProvider messageflowassociationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Monitoring} instances.
	 * 
	 * @generated
	 */
	private MonitoringModelerProvider monitoringModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.MultiInstanceLoopCharacteristics} instances.
	 * 
	 * @generated
	 */
	private MultiInstanceLoopCharacteristicsModelerProvider multiinstanceloopcharacteristicsModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Operation} instances.
	 * 
	 * @generated
	 */
	private OperationModelerProvider operationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.OutputSet} instances.
	 * 
	 * @generated
	 */
	private OutputSetModelerProvider outputsetModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ParallelGateway} instances.
	 * 
	 * @generated
	 */
	private ParallelGatewayModelerProvider parallelgatewayModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Participant} instances.
	 * 
	 * @generated
	 */
	private ParticipantModelerProvider participantModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ParticipantAssociation} instances.
	 * 
	 * @generated
	 */
	private ParticipantAssociationModelerProvider participantassociationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ParticipantMultiplicity} instances.
	 * 
	 * @generated
	 */
	private ParticipantMultiplicityModelerProvider participantmultiplicityModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.PartnerEntity} instances.
	 * 
	 * @generated
	 */
	private PartnerEntityModelerProvider partnerentityModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.PartnerRole} instances.
	 * 
	 * @generated
	 */
	private PartnerRoleModelerProvider partnerroleModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Performer} instances.
	 * 
	 * @generated
	 */
	private PerformerModelerProvider performerModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.PotentialOwner} instances.
	 * 
	 * @generated
	 */
	private PotentialOwnerModelerProvider potentialownerModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Process} instances.
	 * 
	 * @generated
	 */
	private ProcessModelerProvider processModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Property} instances.
	 * 
	 * @generated
	 */
	private PropertyModelerProvider propertyModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ReceiveTask} instances.
	 * 
	 * @generated
	 */
	private ReceiveTaskModelerProvider receivetaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Relationship} instances.
	 * 
	 * @generated
	 */
	private RelationshipModelerProvider relationshipModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Rendering} instances.
	 * 
	 * @generated
	 */
	private RenderingModelerProvider renderingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Resource} instances.
	 * 
	 * @generated
	 */
	private ResourceModelerProvider resourceModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ResourceAssignmentExpression} instances.
	 * 
	 * @generated
	 */
	private ResourceAssignmentExpressionModelerProvider resourceassignmentexpressionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ResourceParameter} instances.
	 * 
	 * @generated
	 */
	private ResourceParameterModelerProvider resourceparameterModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ResourceParameterBinding} instances.
	 * 
	 * @generated
	 */
	private ResourceParameterBindingModelerProvider resourceparameterbindingModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ResourceRole} instances.
	 * 
	 * @generated
	 */
	private ResourceRoleModelerProvider resourceroleModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.RootElement} instances.
	 * 
	 * @generated
	 */
	private RootElementModelerProvider rootelementModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ScriptTask} instances.
	 * 
	 * @generated
	 */
	private ScriptTaskModelerProvider scripttaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.SendTask} instances.
	 * 
	 * @generated
	 */
	private SendTaskModelerProvider sendtaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.SequenceFlow} instances.
	 * 
	 * @generated
	 */
	private SequenceFlowModelerProvider sequenceflowModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ServiceTask} instances.
	 * 
	 * @generated
	 */
	private ServiceTaskModelerProvider servicetaskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Signal} instances.
	 * 
	 * @generated
	 */
	private SignalModelerProvider signalModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.SignalEventDefinition} instances.
	 * 
	 * @generated
	 */
	private SignalEventDefinitionModelerProvider signaleventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.StandardLoopCharacteristics} instances.
	 * 
	 * @generated
	 */
	private StandardLoopCharacteristicsModelerProvider standardloopcharacteristicsModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.StartEvent} instances.
	 * 
	 * @generated
	 */
	private StartEventModelerProvider starteventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.SubChoreography} instances.
	 * 
	 * @generated
	 */
	private SubChoreographyModelerProvider subchoreographyModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.SubConversation} instances.
	 * 
	 * @generated
	 */
	private SubConversationModelerProvider subconversationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.SubProcess} instances.
	 * 
	 * @generated
	 */
	private SubProcessModelerProvider subprocessModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Task} instances.
	 * 
	 * @generated
	 */
	private TaskModelerProvider taskModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.TerminateEventDefinition} instances.
	 * 
	 * @generated
	 */
	private TerminateEventDefinitionModelerProvider terminateeventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.TextAnnotation} instances.
	 * 
	 * @generated
	 */
	private TextAnnotationModelerProvider textannotationModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.ThrowEvent} instances.
	 * 
	 * @generated
	 */
	private ThrowEventModelerProvider throweventModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.TimerEventDefinition} instances.
	 * 
	 * @generated
	 */
	private TimerEventDefinitionModelerProvider timereventdefinitionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.Transaction} instances.
	 * 
	 * @generated
	 */
	private TransactionModelerProvider transactionModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.bpmn2.UserTask} instances.
	 * 
	 * @generated
	 */
	private UserTaskModelerProvider usertaskModelerProvider;
	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public Bpmn2ModelerProviderAdapterFactory(){
		supportedTypes.add(ILabelFeatureProvider.class);
	}
	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory(){
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}
	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory){
		this.parentAdapterFactory = parentAdapterFactory;
	}
	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type){
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}
	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier,Object type){
		return super.adapt(notifier, this);
	}
	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object,Object type){
		if(isFactoryForType(type)){
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class) || (((Class) type).isInstance(adapter))){
				return adapter;
			}
		}
		return null;
	}
	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.addListener(notifyChangedListener);
	}
	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.removeListener(notifyChangedListener);
	}
	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification){
		changeNotifier.fireNotifyChanged(notification);
		if(parentAdapterFactory != null){
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DocumentRoot}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDocumentRootAdapter(){
		if(documentrootModelerProvider == null){
			documentrootModelerProvider = new DocumentRootModelerProvider(this);
		}
		return documentrootModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Activity}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createActivityAdapter(){
		if(activityModelerProvider == null){
			activityModelerProvider = new ActivityModelerProvider(this);
		}
		return activityModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.AdHocSubProcess}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAdHocSubProcessAdapter(){
		if(adhocsubprocessModelerProvider == null){
			adhocsubprocessModelerProvider = new AdHocSubProcessModelerProvider(this);
		}
		return adhocsubprocessModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Artifact}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createArtifactAdapter(){
		if(artifactModelerProvider == null){
			artifactModelerProvider = new ArtifactModelerProvider(this);
		}
		return artifactModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Assignment}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAssignmentAdapter(){
		if(assignmentModelerProvider == null){
			assignmentModelerProvider = new AssignmentModelerProvider(this);
		}
		return assignmentModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Association}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAssociationAdapter(){
		if(associationModelerProvider == null){
			associationModelerProvider = new AssociationModelerProvider(this);
		}
		return associationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Auditing}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAuditingAdapter(){
		if(auditingModelerProvider == null){
			auditingModelerProvider = new AuditingModelerProvider(this);
		}
		return auditingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.BaseElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBaseElementAdapter(){
		if(baseelementModelerProvider == null){
			baseelementModelerProvider = new BaseElementModelerProvider(this);
		}
		return baseelementModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.BoundaryEvent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBoundaryEventAdapter(){
		if(boundaryeventModelerProvider == null){
			boundaryeventModelerProvider = new BoundaryEventModelerProvider(this);
		}
		return boundaryeventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.BusinessRuleTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBusinessRuleTaskAdapter(){
		if(businessruletaskModelerProvider == null){
			businessruletaskModelerProvider = new BusinessRuleTaskModelerProvider(this);
		}
		return businessruletaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CallActivity}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallActivityAdapter(){
		if(callactivityModelerProvider == null){
			callactivityModelerProvider = new CallActivityModelerProvider(this);
		}
		return callactivityModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CallChoreography}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallChoreographyAdapter(){
		if(callchoreographyModelerProvider == null){
			callchoreographyModelerProvider = new CallChoreographyModelerProvider(this);
		}
		return callchoreographyModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CallConversation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallConversationAdapter(){
		if(callconversationModelerProvider == null){
			callconversationModelerProvider = new CallConversationModelerProvider(this);
		}
		return callconversationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CallableElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCallableElementAdapter(){
		if(callableelementModelerProvider == null){
			callableelementModelerProvider = new CallableElementModelerProvider(this);
		}
		return callableelementModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CancelEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCancelEventDefinitionAdapter(){
		if(canceleventdefinitionModelerProvider == null){
			canceleventdefinitionModelerProvider = new CancelEventDefinitionModelerProvider(this);
		}
		return canceleventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CatchEvent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCatchEventAdapter(){
		if(catcheventModelerProvider == null){
			catcheventModelerProvider = new CatchEventModelerProvider(this);
		}
		return catcheventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Category}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCategoryAdapter(){
		if(categoryModelerProvider == null){
			categoryModelerProvider = new CategoryModelerProvider(this);
		}
		return categoryModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CategoryValue}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCategoryValueAdapter(){
		if(categoryvalueModelerProvider == null){
			categoryvalueModelerProvider = new CategoryValueModelerProvider(this);
		}
		return categoryvalueModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Choreography}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createChoreographyAdapter(){
		if(choreographyModelerProvider == null){
			choreographyModelerProvider = new ChoreographyModelerProvider(this);
		}
		return choreographyModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ChoreographyActivity}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createChoreographyActivityAdapter(){
		if(choreographyactivityModelerProvider == null){
			choreographyactivityModelerProvider = new ChoreographyActivityModelerProvider(this);
		}
		return choreographyactivityModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ChoreographyTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createChoreographyTaskAdapter(){
		if(choreographytaskModelerProvider == null){
			choreographytaskModelerProvider = new ChoreographyTaskModelerProvider(this);
		}
		return choreographytaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Collaboration}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCollaborationAdapter(){
		if(collaborationModelerProvider == null){
			collaborationModelerProvider = new CollaborationModelerProvider(this);
		}
		return collaborationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CompensateEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCompensateEventDefinitionAdapter(){
		if(compensateeventdefinitionModelerProvider == null){
			compensateeventdefinitionModelerProvider = new CompensateEventDefinitionModelerProvider(this);
		}
		return compensateeventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ComplexBehaviorDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createComplexBehaviorDefinitionAdapter(){
		if(complexbehaviordefinitionModelerProvider == null){
			complexbehaviordefinitionModelerProvider = new ComplexBehaviorDefinitionModelerProvider(this);
		}
		return complexbehaviordefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ComplexGateway}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createComplexGatewayAdapter(){
		if(complexgatewayModelerProvider == null){
			complexgatewayModelerProvider = new ComplexGatewayModelerProvider(this);
		}
		return complexgatewayModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ConditionalEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConditionalEventDefinitionAdapter(){
		if(conditionaleventdefinitionModelerProvider == null){
			conditionaleventdefinitionModelerProvider = new ConditionalEventDefinitionModelerProvider(this);
		}
		return conditionaleventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Conversation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConversationAdapter(){
		if(conversationModelerProvider == null){
			conversationModelerProvider = new ConversationModelerProvider(this);
		}
		return conversationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ConversationAssociation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConversationAssociationAdapter(){
		if(conversationassociationModelerProvider == null){
			conversationassociationModelerProvider = new ConversationAssociationModelerProvider(this);
		}
		return conversationassociationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ConversationLink}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConversationLinkAdapter(){
		if(conversationlinkModelerProvider == null){
			conversationlinkModelerProvider = new ConversationLinkModelerProvider(this);
		}
		return conversationlinkModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ConversationNode}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConversationNodeAdapter(){
		if(conversationnodeModelerProvider == null){
			conversationnodeModelerProvider = new ConversationNodeModelerProvider(this);
		}
		return conversationnodeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CorrelationKey}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCorrelationKeyAdapter(){
		if(correlationkeyModelerProvider == null){
			correlationkeyModelerProvider = new CorrelationKeyModelerProvider(this);
		}
		return correlationkeyModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CorrelationProperty}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCorrelationPropertyAdapter(){
		if(correlationpropertyModelerProvider == null){
			correlationpropertyModelerProvider = new CorrelationPropertyModelerProvider(this);
		}
		return correlationpropertyModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CorrelationPropertyBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCorrelationPropertyBindingAdapter(){
		if(correlationpropertybindingModelerProvider == null){
			correlationpropertybindingModelerProvider = new CorrelationPropertyBindingModelerProvider(this);
		}
		return correlationpropertybindingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CorrelationPropertyRetrievalExpression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCorrelationPropertyRetrievalExpressionAdapter(){
		if(correlationpropertyretrievalexpressionModelerProvider == null){
			correlationpropertyretrievalexpressionModelerProvider = new CorrelationPropertyRetrievalExpressionModelerProvider(this);
		}
		return correlationpropertyretrievalexpressionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.CorrelationSubscription}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCorrelationSubscriptionAdapter(){
		if(correlationsubscriptionModelerProvider == null){
			correlationsubscriptionModelerProvider = new CorrelationSubscriptionModelerProvider(this);
		}
		return correlationsubscriptionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataAssociation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataAssociationAdapter(){
		if(dataassociationModelerProvider == null){
			dataassociationModelerProvider = new DataAssociationModelerProvider(this);
		}
		return dataassociationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataInput}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataInputAdapter(){
		if(datainputModelerProvider == null){
			datainputModelerProvider = new DataInputModelerProvider(this);
		}
		return datainputModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataInputAssociation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataInputAssociationAdapter(){
		if(datainputassociationModelerProvider == null){
			datainputassociationModelerProvider = new DataInputAssociationModelerProvider(this);
		}
		return datainputassociationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataObject}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataObjectAdapter(){
		if(dataobjectModelerProvider == null){
			dataobjectModelerProvider = new DataObjectModelerProvider(this);
		}
		return dataobjectModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataObjectReference}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataObjectReferenceAdapter(){
		if(dataobjectreferenceModelerProvider == null){
			dataobjectreferenceModelerProvider = new DataObjectReferenceModelerProvider(this);
		}
		return dataobjectreferenceModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataOutput}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataOutputAdapter(){
		if(dataoutputModelerProvider == null){
			dataoutputModelerProvider = new DataOutputModelerProvider(this);
		}
		return dataoutputModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataOutputAssociation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataOutputAssociationAdapter(){
		if(dataoutputassociationModelerProvider == null){
			dataoutputassociationModelerProvider = new DataOutputAssociationModelerProvider(this);
		}
		return dataoutputassociationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataState}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataStateAdapter(){
		if(datastateModelerProvider == null){
			datastateModelerProvider = new DataStateModelerProvider(this);
		}
		return datastateModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataStore}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataStoreAdapter(){
		if(datastoreModelerProvider == null){
			datastoreModelerProvider = new DataStoreModelerProvider(this);
		}
		return datastoreModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.DataStoreReference}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDataStoreReferenceAdapter(){
		if(datastorereferenceModelerProvider == null){
			datastorereferenceModelerProvider = new DataStoreReferenceModelerProvider(this);
		}
		return datastorereferenceModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Definitions}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDefinitionsAdapter(){
		if(definitionsModelerProvider == null){
			definitionsModelerProvider = new DefinitionsModelerProvider(this);
		}
		return definitionsModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Documentation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDocumentationAdapter(){
		if(documentationModelerProvider == null){
			documentationModelerProvider = new DocumentationModelerProvider(this);
		}
		return documentationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.EndEvent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEndEventAdapter(){
		if(endeventModelerProvider == null){
			endeventModelerProvider = new EndEventModelerProvider(this);
		}
		return endeventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.EndPoint}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEndPointAdapter(){
		if(endpointModelerProvider == null){
			endpointModelerProvider = new EndPointModelerProvider(this);
		}
		return endpointModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Error}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createErrorAdapter(){
		if(errorModelerProvider == null){
			errorModelerProvider = new ErrorModelerProvider(this);
		}
		return errorModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ErrorEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createErrorEventDefinitionAdapter(){
		if(erroreventdefinitionModelerProvider == null){
			erroreventdefinitionModelerProvider = new ErrorEventDefinitionModelerProvider(this);
		}
		return erroreventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Escalation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEscalationAdapter(){
		if(escalationModelerProvider == null){
			escalationModelerProvider = new EscalationModelerProvider(this);
		}
		return escalationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.EscalationEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEscalationEventDefinitionAdapter(){
		if(escalationeventdefinitionModelerProvider == null){
			escalationeventdefinitionModelerProvider = new EscalationEventDefinitionModelerProvider(this);
		}
		return escalationeventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Event}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEventAdapter(){
		if(eventModelerProvider == null){
			eventModelerProvider = new EventModelerProvider(this);
		}
		return eventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.EventBasedGateway}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEventBasedGatewayAdapter(){
		if(eventbasedgatewayModelerProvider == null){
			eventbasedgatewayModelerProvider = new EventBasedGatewayModelerProvider(this);
		}
		return eventbasedgatewayModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.EventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEventDefinitionAdapter(){
		if(eventdefinitionModelerProvider == null){
			eventdefinitionModelerProvider = new EventDefinitionModelerProvider(this);
		}
		return eventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ExclusiveGateway}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExclusiveGatewayAdapter(){
		if(exclusivegatewayModelerProvider == null){
			exclusivegatewayModelerProvider = new ExclusiveGatewayModelerProvider(this);
		}
		return exclusivegatewayModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Expression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExpressionAdapter(){
		if(expressionModelerProvider == null){
			expressionModelerProvider = new ExpressionModelerProvider(this);
		}
		return expressionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Extension}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExtensionAdapter(){
		if(extensionModelerProvider == null){
			extensionModelerProvider = new ExtensionModelerProvider(this);
		}
		return extensionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ExtensionAttributeDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExtensionAttributeDefinitionAdapter(){
		if(extensionattributedefinitionModelerProvider == null){
			extensionattributedefinitionModelerProvider = new ExtensionAttributeDefinitionModelerProvider(this);
		}
		return extensionattributedefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ExtensionAttributeValue}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExtensionAttributeValueAdapter(){
		if(extensionattributevalueModelerProvider == null){
			extensionattributevalueModelerProvider = new ExtensionAttributeValueModelerProvider(this);
		}
		return extensionattributevalueModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ExtensionDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExtensionDefinitionAdapter(){
		if(extensiondefinitionModelerProvider == null){
			extensiondefinitionModelerProvider = new ExtensionDefinitionModelerProvider(this);
		}
		return extensiondefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.FlowElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFlowElementAdapter(){
		if(flowelementModelerProvider == null){
			flowelementModelerProvider = new FlowElementModelerProvider(this);
		}
		return flowelementModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.FlowElementsContainer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFlowElementsContainerAdapter(){
		if(flowelementscontainerModelerProvider == null){
			flowelementscontainerModelerProvider = new FlowElementsContainerModelerProvider(this);
		}
		return flowelementscontainerModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.FlowNode}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFlowNodeAdapter(){
		if(flownodeModelerProvider == null){
			flownodeModelerProvider = new FlowNodeModelerProvider(this);
		}
		return flownodeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.FormalExpression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFormalExpressionAdapter(){
		if(formalexpressionModelerProvider == null){
			formalexpressionModelerProvider = new FormalExpressionModelerProvider(this);
		}
		return formalexpressionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Gateway}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGatewayAdapter(){
		if(gatewayModelerProvider == null){
			gatewayModelerProvider = new GatewayModelerProvider(this);
		}
		return gatewayModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.GlobalBusinessRuleTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGlobalBusinessRuleTaskAdapter(){
		if(globalbusinessruletaskModelerProvider == null){
			globalbusinessruletaskModelerProvider = new GlobalBusinessRuleTaskModelerProvider(this);
		}
		return globalbusinessruletaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.GlobalChoreographyTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGlobalChoreographyTaskAdapter(){
		if(globalchoreographytaskModelerProvider == null){
			globalchoreographytaskModelerProvider = new GlobalChoreographyTaskModelerProvider(this);
		}
		return globalchoreographytaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.GlobalConversation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGlobalConversationAdapter(){
		if(globalconversationModelerProvider == null){
			globalconversationModelerProvider = new GlobalConversationModelerProvider(this);
		}
		return globalconversationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.GlobalManualTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGlobalManualTaskAdapter(){
		if(globalmanualtaskModelerProvider == null){
			globalmanualtaskModelerProvider = new GlobalManualTaskModelerProvider(this);
		}
		return globalmanualtaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.GlobalScriptTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGlobalScriptTaskAdapter(){
		if(globalscripttaskModelerProvider == null){
			globalscripttaskModelerProvider = new GlobalScriptTaskModelerProvider(this);
		}
		return globalscripttaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.GlobalTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGlobalTaskAdapter(){
		if(globaltaskModelerProvider == null){
			globaltaskModelerProvider = new GlobalTaskModelerProvider(this);
		}
		return globaltaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.GlobalUserTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGlobalUserTaskAdapter(){
		if(globalusertaskModelerProvider == null){
			globalusertaskModelerProvider = new GlobalUserTaskModelerProvider(this);
		}
		return globalusertaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Group}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGroupAdapter(){
		if(groupModelerProvider == null){
			groupModelerProvider = new GroupModelerProvider(this);
		}
		return groupModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.HumanPerformer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createHumanPerformerAdapter(){
		if(humanperformerModelerProvider == null){
			humanperformerModelerProvider = new HumanPerformerModelerProvider(this);
		}
		return humanperformerModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ImplicitThrowEvent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createImplicitThrowEventAdapter(){
		if(implicitthroweventModelerProvider == null){
			implicitthroweventModelerProvider = new ImplicitThrowEventModelerProvider(this);
		}
		return implicitthroweventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Import}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createImportAdapter(){
		if(importModelerProvider == null){
			importModelerProvider = new ImportModelerProvider(this);
		}
		return importModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.InclusiveGateway}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createInclusiveGatewayAdapter(){
		if(inclusivegatewayModelerProvider == null){
			inclusivegatewayModelerProvider = new InclusiveGatewayModelerProvider(this);
		}
		return inclusivegatewayModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.InputOutputBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createInputOutputBindingAdapter(){
		if(inputoutputbindingModelerProvider == null){
			inputoutputbindingModelerProvider = new InputOutputBindingModelerProvider(this);
		}
		return inputoutputbindingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.InputOutputSpecification}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createInputOutputSpecificationAdapter(){
		if(inputoutputspecificationModelerProvider == null){
			inputoutputspecificationModelerProvider = new InputOutputSpecificationModelerProvider(this);
		}
		return inputoutputspecificationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.InputSet}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createInputSetAdapter(){
		if(inputsetModelerProvider == null){
			inputsetModelerProvider = new InputSetModelerProvider(this);
		}
		return inputsetModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.InteractionNode}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createInteractionNodeAdapter(){
		if(interactionnodeModelerProvider == null){
			interactionnodeModelerProvider = new InteractionNodeModelerProvider(this);
		}
		return interactionnodeModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Interface}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createInterfaceAdapter(){
		if(interfaceModelerProvider == null){
			interfaceModelerProvider = new InterfaceModelerProvider(this);
		}
		return interfaceModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.IntermediateCatchEvent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createIntermediateCatchEventAdapter(){
		if(intermediatecatcheventModelerProvider == null){
			intermediatecatcheventModelerProvider = new IntermediateCatchEventModelerProvider(this);
		}
		return intermediatecatcheventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.IntermediateThrowEvent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createIntermediateThrowEventAdapter(){
		if(intermediatethroweventModelerProvider == null){
			intermediatethroweventModelerProvider = new IntermediateThrowEventModelerProvider(this);
		}
		return intermediatethroweventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ItemAwareElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createItemAwareElementAdapter(){
		if(itemawareelementModelerProvider == null){
			itemawareelementModelerProvider = new ItemAwareElementModelerProvider(this);
		}
		return itemawareelementModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ItemDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createItemDefinitionAdapter(){
		if(itemdefinitionModelerProvider == null){
			itemdefinitionModelerProvider = new ItemDefinitionModelerProvider(this);
		}
		return itemdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Lane}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLaneAdapter(){
		if(laneModelerProvider == null){
			laneModelerProvider = new LaneModelerProvider(this);
		}
		return laneModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.LaneSet}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLaneSetAdapter(){
		if(lanesetModelerProvider == null){
			lanesetModelerProvider = new LaneSetModelerProvider(this);
		}
		return lanesetModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.LinkEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLinkEventDefinitionAdapter(){
		if(linkeventdefinitionModelerProvider == null){
			linkeventdefinitionModelerProvider = new LinkEventDefinitionModelerProvider(this);
		}
		return linkeventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.LoopCharacteristics}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createLoopCharacteristicsAdapter(){
		if(loopcharacteristicsModelerProvider == null){
			loopcharacteristicsModelerProvider = new LoopCharacteristicsModelerProvider(this);
		}
		return loopcharacteristicsModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ManualTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createManualTaskAdapter(){
		if(manualtaskModelerProvider == null){
			manualtaskModelerProvider = new ManualTaskModelerProvider(this);
		}
		return manualtaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Message}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMessageAdapter(){
		if(messageModelerProvider == null){
			messageModelerProvider = new MessageModelerProvider(this);
		}
		return messageModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.MessageEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMessageEventDefinitionAdapter(){
		if(messageeventdefinitionModelerProvider == null){
			messageeventdefinitionModelerProvider = new MessageEventDefinitionModelerProvider(this);
		}
		return messageeventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.MessageFlow}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMessageFlowAdapter(){
		if(messageflowModelerProvider == null){
			messageflowModelerProvider = new MessageFlowModelerProvider(this);
		}
		return messageflowModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.MessageFlowAssociation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMessageFlowAssociationAdapter(){
		if(messageflowassociationModelerProvider == null){
			messageflowassociationModelerProvider = new MessageFlowAssociationModelerProvider(this);
		}
		return messageflowassociationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Monitoring}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMonitoringAdapter(){
		if(monitoringModelerProvider == null){
			monitoringModelerProvider = new MonitoringModelerProvider(this);
		}
		return monitoringModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.MultiInstanceLoopCharacteristics}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMultiInstanceLoopCharacteristicsAdapter(){
		if(multiinstanceloopcharacteristicsModelerProvider == null){
			multiinstanceloopcharacteristicsModelerProvider = new MultiInstanceLoopCharacteristicsModelerProvider(this);
		}
		return multiinstanceloopcharacteristicsModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Operation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationAdapter(){
		if(operationModelerProvider == null){
			operationModelerProvider = new OperationModelerProvider(this);
		}
		return operationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.OutputSet}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOutputSetAdapter(){
		if(outputsetModelerProvider == null){
			outputsetModelerProvider = new OutputSetModelerProvider(this);
		}
		return outputsetModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ParallelGateway}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createParallelGatewayAdapter(){
		if(parallelgatewayModelerProvider == null){
			parallelgatewayModelerProvider = new ParallelGatewayModelerProvider(this);
		}
		return parallelgatewayModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Participant}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createParticipantAdapter(){
		if(participantModelerProvider == null){
			participantModelerProvider = new ParticipantModelerProvider(this);
		}
		return participantModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ParticipantAssociation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createParticipantAssociationAdapter(){
		if(participantassociationModelerProvider == null){
			participantassociationModelerProvider = new ParticipantAssociationModelerProvider(this);
		}
		return participantassociationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ParticipantMultiplicity}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createParticipantMultiplicityAdapter(){
		if(participantmultiplicityModelerProvider == null){
			participantmultiplicityModelerProvider = new ParticipantMultiplicityModelerProvider(this);
		}
		return participantmultiplicityModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.PartnerEntity}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPartnerEntityAdapter(){
		if(partnerentityModelerProvider == null){
			partnerentityModelerProvider = new PartnerEntityModelerProvider(this);
		}
		return partnerentityModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.PartnerRole}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPartnerRoleAdapter(){
		if(partnerroleModelerProvider == null){
			partnerroleModelerProvider = new PartnerRoleModelerProvider(this);
		}
		return partnerroleModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Performer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPerformerAdapter(){
		if(performerModelerProvider == null){
			performerModelerProvider = new PerformerModelerProvider(this);
		}
		return performerModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.PotentialOwner}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPotentialOwnerAdapter(){
		if(potentialownerModelerProvider == null){
			potentialownerModelerProvider = new PotentialOwnerModelerProvider(this);
		}
		return potentialownerModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Process}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessAdapter(){
		if(processModelerProvider == null){
			processModelerProvider = new ProcessModelerProvider(this);
		}
		return processModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Property}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPropertyAdapter(){
		if(propertyModelerProvider == null){
			propertyModelerProvider = new PropertyModelerProvider(this);
		}
		return propertyModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ReceiveTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createReceiveTaskAdapter(){
		if(receivetaskModelerProvider == null){
			receivetaskModelerProvider = new ReceiveTaskModelerProvider(this);
		}
		return receivetaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Relationship}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRelationshipAdapter(){
		if(relationshipModelerProvider == null){
			relationshipModelerProvider = new RelationshipModelerProvider(this);
		}
		return relationshipModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Rendering}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRenderingAdapter(){
		if(renderingModelerProvider == null){
			renderingModelerProvider = new RenderingModelerProvider(this);
		}
		return renderingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Resource}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createResourceAdapter(){
		if(resourceModelerProvider == null){
			resourceModelerProvider = new ResourceModelerProvider(this);
		}
		return resourceModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ResourceAssignmentExpression}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createResourceAssignmentExpressionAdapter(){
		if(resourceassignmentexpressionModelerProvider == null){
			resourceassignmentexpressionModelerProvider = new ResourceAssignmentExpressionModelerProvider(this);
		}
		return resourceassignmentexpressionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ResourceParameter}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createResourceParameterAdapter(){
		if(resourceparameterModelerProvider == null){
			resourceparameterModelerProvider = new ResourceParameterModelerProvider(this);
		}
		return resourceparameterModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ResourceParameterBinding}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createResourceParameterBindingAdapter(){
		if(resourceparameterbindingModelerProvider == null){
			resourceparameterbindingModelerProvider = new ResourceParameterBindingModelerProvider(this);
		}
		return resourceparameterbindingModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ResourceRole}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createResourceRoleAdapter(){
		if(resourceroleModelerProvider == null){
			resourceroleModelerProvider = new ResourceRoleModelerProvider(this);
		}
		return resourceroleModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.RootElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRootElementAdapter(){
		if(rootelementModelerProvider == null){
			rootelementModelerProvider = new RootElementModelerProvider(this);
		}
		return rootelementModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ScriptTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createScriptTaskAdapter(){
		if(scripttaskModelerProvider == null){
			scripttaskModelerProvider = new ScriptTaskModelerProvider(this);
		}
		return scripttaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.SendTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSendTaskAdapter(){
		if(sendtaskModelerProvider == null){
			sendtaskModelerProvider = new SendTaskModelerProvider(this);
		}
		return sendtaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.SequenceFlow}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSequenceFlowAdapter(){
		if(sequenceflowModelerProvider == null){
			sequenceflowModelerProvider = new SequenceFlowModelerProvider(this);
		}
		return sequenceflowModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ServiceTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createServiceTaskAdapter(){
		if(servicetaskModelerProvider == null){
			servicetaskModelerProvider = new ServiceTaskModelerProvider(this);
		}
		return servicetaskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Signal}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSignalAdapter(){
		if(signalModelerProvider == null){
			signalModelerProvider = new SignalModelerProvider(this);
		}
		return signalModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.SignalEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSignalEventDefinitionAdapter(){
		if(signaleventdefinitionModelerProvider == null){
			signaleventdefinitionModelerProvider = new SignalEventDefinitionModelerProvider(this);
		}
		return signaleventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.StandardLoopCharacteristics}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStandardLoopCharacteristicsAdapter(){
		if(standardloopcharacteristicsModelerProvider == null){
			standardloopcharacteristicsModelerProvider = new StandardLoopCharacteristicsModelerProvider(this);
		}
		return standardloopcharacteristicsModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.StartEvent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStartEventAdapter(){
		if(starteventModelerProvider == null){
			starteventModelerProvider = new StartEventModelerProvider(this);
		}
		return starteventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.SubChoreography}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSubChoreographyAdapter(){
		if(subchoreographyModelerProvider == null){
			subchoreographyModelerProvider = new SubChoreographyModelerProvider(this);
		}
		return subchoreographyModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.SubConversation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSubConversationAdapter(){
		if(subconversationModelerProvider == null){
			subconversationModelerProvider = new SubConversationModelerProvider(this);
		}
		return subconversationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.SubProcess}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSubProcessAdapter(){
		if(subprocessModelerProvider == null){
			subprocessModelerProvider = new SubProcessModelerProvider(this);
		}
		return subprocessModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Task}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTaskAdapter(){
		if(taskModelerProvider == null){
			taskModelerProvider = new TaskModelerProvider(this);
		}
		return taskModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.TerminateEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTerminateEventDefinitionAdapter(){
		if(terminateeventdefinitionModelerProvider == null){
			terminateeventdefinitionModelerProvider = new TerminateEventDefinitionModelerProvider(this);
		}
		return terminateeventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.TextAnnotation}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTextAnnotationAdapter(){
		if(textannotationModelerProvider == null){
			textannotationModelerProvider = new TextAnnotationModelerProvider(this);
		}
		return textannotationModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.ThrowEvent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createThrowEventAdapter(){
		if(throweventModelerProvider == null){
			throweventModelerProvider = new ThrowEventModelerProvider(this);
		}
		return throweventModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.TimerEventDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTimerEventDefinitionAdapter(){
		if(timereventdefinitionModelerProvider == null){
			timereventdefinitionModelerProvider = new TimerEventDefinitionModelerProvider(this);
		}
		return timereventdefinitionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.Transaction}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTransactionAdapter(){
		if(transactionModelerProvider == null){
			transactionModelerProvider = new TransactionModelerProvider(this);
		}
		return transactionModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.eclipse.bpmn2.UserTask}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUserTaskAdapter(){
		if(usertaskModelerProvider == null){
			usertaskModelerProvider = new UserTaskModelerProvider(this);
		}
		return usertaskModelerProvider;
	}
	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose(){
		if(documentrootModelerProvider != null){
			documentrootModelerProvider.dispose();
		}
		if(activityModelerProvider != null){
			activityModelerProvider.dispose();
		}
		if(adhocsubprocessModelerProvider != null){
			adhocsubprocessModelerProvider.dispose();
		}
		if(artifactModelerProvider != null){
			artifactModelerProvider.dispose();
		}
		if(assignmentModelerProvider != null){
			assignmentModelerProvider.dispose();
		}
		if(associationModelerProvider != null){
			associationModelerProvider.dispose();
		}
		if(auditingModelerProvider != null){
			auditingModelerProvider.dispose();
		}
		if(baseelementModelerProvider != null){
			baseelementModelerProvider.dispose();
		}
		if(boundaryeventModelerProvider != null){
			boundaryeventModelerProvider.dispose();
		}
		if(businessruletaskModelerProvider != null){
			businessruletaskModelerProvider.dispose();
		}
		if(callactivityModelerProvider != null){
			callactivityModelerProvider.dispose();
		}
		if(callchoreographyModelerProvider != null){
			callchoreographyModelerProvider.dispose();
		}
		if(callconversationModelerProvider != null){
			callconversationModelerProvider.dispose();
		}
		if(callableelementModelerProvider != null){
			callableelementModelerProvider.dispose();
		}
		if(canceleventdefinitionModelerProvider != null){
			canceleventdefinitionModelerProvider.dispose();
		}
		if(catcheventModelerProvider != null){
			catcheventModelerProvider.dispose();
		}
		if(categoryModelerProvider != null){
			categoryModelerProvider.dispose();
		}
		if(categoryvalueModelerProvider != null){
			categoryvalueModelerProvider.dispose();
		}
		if(choreographyModelerProvider != null){
			choreographyModelerProvider.dispose();
		}
		if(choreographyactivityModelerProvider != null){
			choreographyactivityModelerProvider.dispose();
		}
		if(choreographytaskModelerProvider != null){
			choreographytaskModelerProvider.dispose();
		}
		if(collaborationModelerProvider != null){
			collaborationModelerProvider.dispose();
		}
		if(compensateeventdefinitionModelerProvider != null){
			compensateeventdefinitionModelerProvider.dispose();
		}
		if(complexbehaviordefinitionModelerProvider != null){
			complexbehaviordefinitionModelerProvider.dispose();
		}
		if(complexgatewayModelerProvider != null){
			complexgatewayModelerProvider.dispose();
		}
		if(conditionaleventdefinitionModelerProvider != null){
			conditionaleventdefinitionModelerProvider.dispose();
		}
		if(conversationModelerProvider != null){
			conversationModelerProvider.dispose();
		}
		if(conversationassociationModelerProvider != null){
			conversationassociationModelerProvider.dispose();
		}
		if(conversationlinkModelerProvider != null){
			conversationlinkModelerProvider.dispose();
		}
		if(conversationnodeModelerProvider != null){
			conversationnodeModelerProvider.dispose();
		}
		if(correlationkeyModelerProvider != null){
			correlationkeyModelerProvider.dispose();
		}
		if(correlationpropertyModelerProvider != null){
			correlationpropertyModelerProvider.dispose();
		}
		if(correlationpropertybindingModelerProvider != null){
			correlationpropertybindingModelerProvider.dispose();
		}
		if(correlationpropertyretrievalexpressionModelerProvider != null){
			correlationpropertyretrievalexpressionModelerProvider.dispose();
		}
		if(correlationsubscriptionModelerProvider != null){
			correlationsubscriptionModelerProvider.dispose();
		}
		if(dataassociationModelerProvider != null){
			dataassociationModelerProvider.dispose();
		}
		if(datainputModelerProvider != null){
			datainputModelerProvider.dispose();
		}
		if(datainputassociationModelerProvider != null){
			datainputassociationModelerProvider.dispose();
		}
		if(dataobjectModelerProvider != null){
			dataobjectModelerProvider.dispose();
		}
		if(dataobjectreferenceModelerProvider != null){
			dataobjectreferenceModelerProvider.dispose();
		}
		if(dataoutputModelerProvider != null){
			dataoutputModelerProvider.dispose();
		}
		if(dataoutputassociationModelerProvider != null){
			dataoutputassociationModelerProvider.dispose();
		}
		if(datastateModelerProvider != null){
			datastateModelerProvider.dispose();
		}
		if(datastoreModelerProvider != null){
			datastoreModelerProvider.dispose();
		}
		if(datastorereferenceModelerProvider != null){
			datastorereferenceModelerProvider.dispose();
		}
		if(definitionsModelerProvider != null){
			definitionsModelerProvider.dispose();
		}
		if(documentationModelerProvider != null){
			documentationModelerProvider.dispose();
		}
		if(endeventModelerProvider != null){
			endeventModelerProvider.dispose();
		}
		if(endpointModelerProvider != null){
			endpointModelerProvider.dispose();
		}
		if(errorModelerProvider != null){
			errorModelerProvider.dispose();
		}
		if(erroreventdefinitionModelerProvider != null){
			erroreventdefinitionModelerProvider.dispose();
		}
		if(escalationModelerProvider != null){
			escalationModelerProvider.dispose();
		}
		if(escalationeventdefinitionModelerProvider != null){
			escalationeventdefinitionModelerProvider.dispose();
		}
		if(eventModelerProvider != null){
			eventModelerProvider.dispose();
		}
		if(eventbasedgatewayModelerProvider != null){
			eventbasedgatewayModelerProvider.dispose();
		}
		if(eventdefinitionModelerProvider != null){
			eventdefinitionModelerProvider.dispose();
		}
		if(exclusivegatewayModelerProvider != null){
			exclusivegatewayModelerProvider.dispose();
		}
		if(expressionModelerProvider != null){
			expressionModelerProvider.dispose();
		}
		if(extensionModelerProvider != null){
			extensionModelerProvider.dispose();
		}
		if(extensionattributedefinitionModelerProvider != null){
			extensionattributedefinitionModelerProvider.dispose();
		}
		if(extensionattributevalueModelerProvider != null){
			extensionattributevalueModelerProvider.dispose();
		}
		if(extensiondefinitionModelerProvider != null){
			extensiondefinitionModelerProvider.dispose();
		}
		if(flowelementModelerProvider != null){
			flowelementModelerProvider.dispose();
		}
		if(flowelementscontainerModelerProvider != null){
			flowelementscontainerModelerProvider.dispose();
		}
		if(flownodeModelerProvider != null){
			flownodeModelerProvider.dispose();
		}
		if(formalexpressionModelerProvider != null){
			formalexpressionModelerProvider.dispose();
		}
		if(gatewayModelerProvider != null){
			gatewayModelerProvider.dispose();
		}
		if(globalbusinessruletaskModelerProvider != null){
			globalbusinessruletaskModelerProvider.dispose();
		}
		if(globalchoreographytaskModelerProvider != null){
			globalchoreographytaskModelerProvider.dispose();
		}
		if(globalconversationModelerProvider != null){
			globalconversationModelerProvider.dispose();
		}
		if(globalmanualtaskModelerProvider != null){
			globalmanualtaskModelerProvider.dispose();
		}
		if(globalscripttaskModelerProvider != null){
			globalscripttaskModelerProvider.dispose();
		}
		if(globaltaskModelerProvider != null){
			globaltaskModelerProvider.dispose();
		}
		if(globalusertaskModelerProvider != null){
			globalusertaskModelerProvider.dispose();
		}
		if(groupModelerProvider != null){
			groupModelerProvider.dispose();
		}
		if(humanperformerModelerProvider != null){
			humanperformerModelerProvider.dispose();
		}
		if(implicitthroweventModelerProvider != null){
			implicitthroweventModelerProvider.dispose();
		}
		if(importModelerProvider != null){
			importModelerProvider.dispose();
		}
		if(inclusivegatewayModelerProvider != null){
			inclusivegatewayModelerProvider.dispose();
		}
		if(inputoutputbindingModelerProvider != null){
			inputoutputbindingModelerProvider.dispose();
		}
		if(inputoutputspecificationModelerProvider != null){
			inputoutputspecificationModelerProvider.dispose();
		}
		if(inputsetModelerProvider != null){
			inputsetModelerProvider.dispose();
		}
		if(interactionnodeModelerProvider != null){
			interactionnodeModelerProvider.dispose();
		}
		if(interfaceModelerProvider != null){
			interfaceModelerProvider.dispose();
		}
		if(intermediatecatcheventModelerProvider != null){
			intermediatecatcheventModelerProvider.dispose();
		}
		if(intermediatethroweventModelerProvider != null){
			intermediatethroweventModelerProvider.dispose();
		}
		if(itemawareelementModelerProvider != null){
			itemawareelementModelerProvider.dispose();
		}
		if(itemdefinitionModelerProvider != null){
			itemdefinitionModelerProvider.dispose();
		}
		if(laneModelerProvider != null){
			laneModelerProvider.dispose();
		}
		if(lanesetModelerProvider != null){
			lanesetModelerProvider.dispose();
		}
		if(linkeventdefinitionModelerProvider != null){
			linkeventdefinitionModelerProvider.dispose();
		}
		if(loopcharacteristicsModelerProvider != null){
			loopcharacteristicsModelerProvider.dispose();
		}
		if(manualtaskModelerProvider != null){
			manualtaskModelerProvider.dispose();
		}
		if(messageModelerProvider != null){
			messageModelerProvider.dispose();
		}
		if(messageeventdefinitionModelerProvider != null){
			messageeventdefinitionModelerProvider.dispose();
		}
		if(messageflowModelerProvider != null){
			messageflowModelerProvider.dispose();
		}
		if(messageflowassociationModelerProvider != null){
			messageflowassociationModelerProvider.dispose();
		}
		if(monitoringModelerProvider != null){
			monitoringModelerProvider.dispose();
		}
		if(multiinstanceloopcharacteristicsModelerProvider != null){
			multiinstanceloopcharacteristicsModelerProvider.dispose();
		}
		if(operationModelerProvider != null){
			operationModelerProvider.dispose();
		}
		if(outputsetModelerProvider != null){
			outputsetModelerProvider.dispose();
		}
		if(parallelgatewayModelerProvider != null){
			parallelgatewayModelerProvider.dispose();
		}
		if(participantModelerProvider != null){
			participantModelerProvider.dispose();
		}
		if(participantassociationModelerProvider != null){
			participantassociationModelerProvider.dispose();
		}
		if(participantmultiplicityModelerProvider != null){
			participantmultiplicityModelerProvider.dispose();
		}
		if(partnerentityModelerProvider != null){
			partnerentityModelerProvider.dispose();
		}
		if(partnerroleModelerProvider != null){
			partnerroleModelerProvider.dispose();
		}
		if(performerModelerProvider != null){
			performerModelerProvider.dispose();
		}
		if(potentialownerModelerProvider != null){
			potentialownerModelerProvider.dispose();
		}
		if(processModelerProvider != null){
			processModelerProvider.dispose();
		}
		if(propertyModelerProvider != null){
			propertyModelerProvider.dispose();
		}
		if(receivetaskModelerProvider != null){
			receivetaskModelerProvider.dispose();
		}
		if(relationshipModelerProvider != null){
			relationshipModelerProvider.dispose();
		}
		if(renderingModelerProvider != null){
			renderingModelerProvider.dispose();
		}
		if(resourceModelerProvider != null){
			resourceModelerProvider.dispose();
		}
		if(resourceassignmentexpressionModelerProvider != null){
			resourceassignmentexpressionModelerProvider.dispose();
		}
		if(resourceparameterModelerProvider != null){
			resourceparameterModelerProvider.dispose();
		}
		if(resourceparameterbindingModelerProvider != null){
			resourceparameterbindingModelerProvider.dispose();
		}
		if(resourceroleModelerProvider != null){
			resourceroleModelerProvider.dispose();
		}
		if(rootelementModelerProvider != null){
			rootelementModelerProvider.dispose();
		}
		if(scripttaskModelerProvider != null){
			scripttaskModelerProvider.dispose();
		}
		if(sendtaskModelerProvider != null){
			sendtaskModelerProvider.dispose();
		}
		if(sequenceflowModelerProvider != null){
			sequenceflowModelerProvider.dispose();
		}
		if(servicetaskModelerProvider != null){
			servicetaskModelerProvider.dispose();
		}
		if(signalModelerProvider != null){
			signalModelerProvider.dispose();
		}
		if(signaleventdefinitionModelerProvider != null){
			signaleventdefinitionModelerProvider.dispose();
		}
		if(standardloopcharacteristicsModelerProvider != null){
			standardloopcharacteristicsModelerProvider.dispose();
		}
		if(starteventModelerProvider != null){
			starteventModelerProvider.dispose();
		}
		if(subchoreographyModelerProvider != null){
			subchoreographyModelerProvider.dispose();
		}
		if(subconversationModelerProvider != null){
			subconversationModelerProvider.dispose();
		}
		if(subprocessModelerProvider != null){
			subprocessModelerProvider.dispose();
		}
		if(taskModelerProvider != null){
			taskModelerProvider.dispose();
		}
		if(terminateeventdefinitionModelerProvider != null){
			terminateeventdefinitionModelerProvider.dispose();
		}
		if(textannotationModelerProvider != null){
			textannotationModelerProvider.dispose();
		}
		if(throweventModelerProvider != null){
			throweventModelerProvider.dispose();
		}
		if(timereventdefinitionModelerProvider != null){
			timereventdefinitionModelerProvider.dispose();
		}
		if(transactionModelerProvider != null){
			transactionModelerProvider.dispose();
		}
		if(usertaskModelerProvider != null){
			usertaskModelerProvider.dispose();
		}
	}
}
