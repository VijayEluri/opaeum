package org.opaeum.validation.namegeneration;
import org.opaeum.feature.MappingInfo;
import org.opaeum.metamodel.activities.INakedActivityNode;
import org.opaeum.metamodel.activities.INakedOutputPin;
import org.opaeum.metamodel.core.INakedAssociation;
import org.opaeum.metamodel.core.INakedComplexStructure;
import org.opaeum.metamodel.core.INakedElement;
import org.opaeum.metamodel.core.INakedEnumerationLiteral;
import org.opaeum.metamodel.core.INakedHelper;
import org.opaeum.metamodel.core.INakedInterface;
import org.opaeum.metamodel.core.INakedMultiplicityElement;
import org.opaeum.metamodel.core.INakedTypedElement;
import org.opaeum.metamodel.core.INakedValueSpecification;
import org.opaeum.metamodel.name.NameWrapper;
import org.opaeum.metamodel.name.SingularNameWrapper;
import org.opaeum.metamodel.statemachines.INakedState;
import org.opaeum.name.NameConverter;
public abstract class AbstractPersistentNameGenerator extends AbstractNameGenerator {
	@Override
	protected boolean hasName(INakedElement p){
		return p.getMappingInfo().hasPersistentName();
	}
	protected final String generateQualifiedPersistentName(INakedElement nme) {
		if (nme instanceof INakedState) {
			INakedState state = (INakedState) nme;
			if (state.hasEnclosingState()) {
				return generateQualifiedPersistentName(state.getEnclosingState()) + "/"
						+ state.getMappingInfo().getPersistentName();
			} else {
				String asIs = state.getMappingInfo().getPersistentName().getAsIs();
				return asIs;
			}
		} else if (nme instanceof INakedActivityNode) {
			INakedActivityNode node = (INakedActivityNode) nme;
			if (node.getInStructuredNode() != null) {
				return generateQualifiedPersistentName(node.getInStructuredNode()) + "/"
						+ node.getMappingInfo().getPersistentName();
			} else {
				return node.getMappingInfo().getPersistentName().getAsIs();
			}
		}else{
			MappingInfo mappingInfo2 = nme.getMappingInfo();
			if (nme.getOwnerElement() instanceof INakedElement) {
				INakedElement owner = (INakedElement) nme.getOwnerElement();
				MappingInfo mappingInfo = owner.getMappingInfo();
				NameWrapper persistentName = mappingInfo.getPersistentName();
				return persistentName.getAsIs() + "."
						+ mappingInfo2.getPersistentName().getAsIs();
			} else {
				return mappingInfo2.getPersistentName().getAsIs();
			}
		}
	}
	protected final NameWrapper generateSqlName(INakedElement nme) {

		String generatedName = null;
		INakedValueSpecification existingSqlName = getTaggedValue(nme, "persistentName", "persistenceType");
		if (existingSqlName != null) {
			generatedName = existingSqlName.stringValue();
		} else if (nme instanceof INakedAssociation) {
			// Name is generated by UmlNameGenerator
			INakedAssociation ass = (INakedAssociation) nme;
			generatedName = NameConverter.toUnderscoreStyle(ass.getName());
		} else if (nme instanceof INakedMultiplicityElement) {
			INakedTypedElement tew = (INakedTypedElement) nme;
			String name = tew.getName();
			if(tew instanceof INakedOutputPin){
				name=name+"On" + NameConverter.capitalize(tew.getOwnerElement().getName());//TO ensure uniqueness of name
			}
			//TODO check if this was necessary
			boolean isCmCompatible=true;
			boolean isPersistentInterface = tew.getNakedBaseType() instanceof INakedInterface && !(tew.getNakedBaseType() instanceof INakedHelper);
			if (tew.getNakedBaseType() instanceof INakedComplexStructure || (!isCmCompatible && isPersistentInterface)) {
				// foreign key
				// TODO re-evaluate the _id thing
				generatedName = NameConverter.toUnderscoreStyle(name) + "_id";
			} else {
				generatedName = NameConverter.toUnderscoreStyle(name);
			}
		} else if (nme instanceof INakedEnumerationLiteral) {
			INakedEnumerationLiteral nakedLiteral = ((INakedEnumerationLiteral) nme);
			generatedName = nakedLiteral.getName();
		} else {
			// TODO actions within StructuredACtivityNodes
			generatedName = NameConverter.toUnderscoreStyle(nme.getName());
		}
		return new SingularNameWrapper(generatedName.toLowerCase(), null);
	}
}
