Vision:
Object and Process Oriented Application Development and Execution environment for SME's

Removes the gap between business processes and business data
Unifies data and process modelling in one tool
Keeps the modelling initiative business oriented
Allows business and it to work on models together

Target applications
Small to very small business with little IT infrastructure and basically no development capabilities
Needs for ERP but not enough money

Business model

Free 4 hour demo's with workable solution afterwards
Value added libraries and services

Rapid Modelling in unified modeling tool for:
UML Class Diagrams
UML Processes (Activities)
UML Methods (activities)
UML Composite Structure Diagrams
UML State Machines
BPMN Processes
User Interface models directly tied into model
Exactly as simple or complex as the user wants it to be
Hide away unnecessary complexity of UML/BPMN

Cloud ready
Use existing accounts (LinkedIn, Facebook, Gmail) to log in
Manage Groups and Users through these tools
Schedules Calendar entries for significant events

Business Activity Monitoring
Built into the core engine and  available from modeling environment
Hides complexity - no queries or complex structures to worry about
 
Ad hoc task management and case management
seamless integration between ad hoc tasks and processes
Task can wait for sub-process completion, and process wait for task completion
 

TODOS

ECLIPSE
General
GeneratorGenerator - make this an eclipse plugin too

BAM
Introduce Dashboard formPanel for Charts based on standard queries - generate MDX
Trickle feed process data, as well as data marked as facts to the warehouse 
Integrate Saiku  Jquery components with JSF

Opaeum Topcased
Add Observations to Stereotypes for Activities to be used in time and interval expression
Disable Opaeum functionality if all the resources could not be resolved
Async actions in pallete for Screenflows, Responsibilities, 
Action to Convert methods to business processes
On Argument Pin table, provide add and remove buttons to add and remove params from the called element  
Action to generate screenflow, process,method or operation on call action
For Parameter nodes, choose parameters either from activity or containing statemachine
Qualifier section for properties - expose only name and type
For output pins, create a shortcut UI to create addVariable and addStructuralFeature actions to flow from the pins
For Structural Feature and Calloperation actions, calculate available feature based on the type of the target pin
Transformation and selection behavior sections of object flows
EmbeddedScreenflowtasks should force a single relationship to a single STateMAchine (include deletion? or not?). At least create it.
Custom ProblemView
Relink an emf UML model
Reception.Signal
Display Operation.name at the top 
Arrow for delegation and socket-ball for assembly
Policy for delegation should match provided interfaces at least
Policit for assembly
Allow editing of provided and required interfaces of a port and automatically maintain a class for it, hide the class if possible, delete the class when the port is deleted, mabye
keep it as a stereotype attribute

Refactoring
Port BehaviorUtil to EmfBehaviorUtil and identify processes and tasks during extraction, 
OR port eclipse code to use OpaeumWorkspace instead
Introduce a new construct @TransformationFeature that ONLY specifies requirements and not positioning

UIM
Menu and tree -  Introduce ActionItem and Action Group group operations and properties, display tree/menu in Swing
Put label width on all possible containers of fields
Row height on uimColumnLayout
remove fields pointing to obsolete properties
remove operation navigations and action buttons to obsolete operations
remove obsolete forms 
allow forms to be reused as panels
Add button bar for actions on multiple rows in the table
Introduce entryScreen for components:
 allow formpanels to be used, 
 have an external and internal view
 by default, don't allow compositional browsing beyond the component external view, except for those contained by exposed interfaces but allow this to be overridden for manager type users
 show menu items for each operation on each outgoing gateway port that the current users has a required dependency for
Introduce ocl expressions for things such as lookups and security constraints
Generate UIM from INakedWorkspace


Processes
For all events implement correlation logic in the context;s event handler
Implement global change events and repeating absolute time events. Broadcast these to subscribing processes.
RelativeTimeEvents should have instancespecifications of type DurationSpecification, with repeats flag
ABsoluteTimeEvents should have instancespecifications of type DatTimeSpecification (i.e.1st day of week) with repeats flag
Operation Message Structure to become interface with a default implementation
BehaviorMessageStructures should implement the Operation Message Structure as contract and extend super behaviors
Implement expiry logic for events
Remember to allow ALL events to be retryable - retry until expiry 
timevents may want to repeat
Support Asynchandlers for behaviors

TaskManagement
Model UserInterface too
Implement ports as default interfaces that delegate operations to the containing component. Such invocations would either delegate to users or delegate
to a process (ownedBehaviour of the component)
Swimlanes WITHOUT property "represents" and task definitions specify potentialOwners, Swimlanes WITH property "represents" and Target pins specify actual owners.
Swimlanes with Classifier Represents and no potential Owners will use ClassifierX.allInstance() for POTENTIAL owners 
Create one task per value in targetElement expression
Remember that Responsibilities implemented as StateMachines are TaskObjects, not OperationProcessObjects
Display current task control buttons in the ui
Track audit changes against current task

Operations
unmarshall the pins to allow OCL compilation for postconditions

Statemachines
Implement effects, entry and do-action subprocess calls
Implement state invariants
Implement states as Inner classes that act on the outer class - get rid of JBPM

Composite Structures
With delegation to multiple parts/ports ensure that collectively all the interfaces are implemented - remember to modify logic in Topcased

Classes
Facts
Generalizationsets
PowerTypes
link powerTypeInstances with generalization
Implement constraints on SimpleTypes on the cla 

Activities
Asynchronously fire newly created nodeInstances for Parallel Expansion Regions and Forks 
Implement link actions, specifically for qualifiers
Merge object tokens on objectflows targeting a join 
Refactor Jbpm out:
1. Class per action, possibly even pin and flow
2. Implement tokens as a single separate class and associate with appropriate activityNodeActiviation

Maven
put MavenArtefatId in profile

Validation
ModelNameUniqueness
ModelName not the same as workspace - creates maven chaos
Asynchronous actions cannot have outputs


Runtime
For BusinessComponent instances, add a property called LDAP Identifier which associates that instance with an ldap entry
OR
Define Facebook/linked in/Google Group to use
On BusinessRole, have a boolean field that states if a user can automatically create such a role instance
On login, check ldap query for logged in user and take the user through a wizard adding a businessrole instance for every potential role 
where the user also belongs to the ldap group that represents the businesscomponentinstance
For ocl expressions from uim - use Javassist to generate expressions at runtime, including common composite logic
For preconditions on operations that do NOT refer to parameters, disable the operationNavigation or action if it evaluates to false
For preconditions of transitions that do NOT refer to event parameters, disable the associated operationNaviation/actionButton if it evualuates to false
For notification templates, isolate velocity statements and remove empty containing nodes from treee
For notications templates, repeat rows if table contained in a foreach 