/**
 */
package org.opaeum.metamodels.simulation.simulation.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.opaeum.metamodels.simulation.simulation.util.SimulationAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimulationItemProviderAdapterFactory extends SimulationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimulationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.ValueSimulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueSimulationItemProvider valueSimulationItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.ValueSimulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueSimulationAdapter() {
		if (valueSimulationItemProvider == null) {
			valueSimulationItemProvider = new ValueSimulationItemProvider(this);
		}

		return valueSimulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.NormalDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalDistributionItemProvider normalDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.NormalDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalDistributionAdapter() {
		if (normalDistributionItemProvider == null) {
			normalDistributionItemProvider = new NormalDistributionItemProvider(this);
		}

		return normalDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.UniformDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniformDistributionItemProvider uniformDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.UniformDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniformDistributionAdapter() {
		if (uniformDistributionItemProvider == null) {
			uniformDistributionItemProvider = new UniformDistributionItemProvider(this);
		}

		return uniformDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.ExponentialDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExponentialDistributionItemProvider exponentialDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.ExponentialDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExponentialDistributionAdapter() {
		if (exponentialDistributionItemProvider == null) {
			exponentialDistributionItemProvider = new ExponentialDistributionItemProvider(this);
		}

		return exponentialDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.SimulatedSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimulatedSlotItemProvider simulatedSlotItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.SimulatedSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimulatedSlotAdapter() {
		if (simulatedSlotItemProvider == null) {
			simulatedSlotItemProvider = new SimulatedSlotItemProvider(this);
		}

		return simulatedSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.NumericValueDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericValueDistributionItemProvider numericValueDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.NumericValueDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericValueDistributionAdapter() {
		if (numericValueDistributionItemProvider == null) {
			numericValueDistributionItemProvider = new NumericValueDistributionItemProvider(this);
		}

		return numericValueDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.EnumLiteralSimulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumLiteralSimulationItemProvider enumLiteralSimulationItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.EnumLiteralSimulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumLiteralSimulationAdapter() {
		if (enumLiteralSimulationItemProvider == null) {
			enumLiteralSimulationItemProvider = new EnumLiteralSimulationItemProvider(this);
		}

		return enumLiteralSimulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.ContainedInstanceValueSimulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainedInstanceValueSimulationItemProvider containedInstanceValueSimulationItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.ContainedInstanceValueSimulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainedInstanceValueSimulationAdapter() {
		if (containedInstanceValueSimulationItemProvider == null) {
			containedInstanceValueSimulationItemProvider = new ContainedInstanceValueSimulationItemProvider(this);
		}

		return containedInstanceValueSimulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.BooleanValueSimulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanValueSimulationItemProvider booleanValueSimulationItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.BooleanValueSimulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanValueSimulationAdapter() {
		if (booleanValueSimulationItemProvider == null) {
			booleanValueSimulationItemProvider = new BooleanValueSimulationItemProvider(this);
		}

		return booleanValueSimulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.NumberRangeDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberRangeDistributionItemProvider numberRangeDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.NumberRangeDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberRangeDistributionAdapter() {
		if (numberRangeDistributionItemProvider == null) {
			numberRangeDistributionItemProvider = new NumberRangeDistributionItemProvider(this);
		}

		return numberRangeDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.ReferencedInstanceSimulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferencedInstanceSimulationItemProvider referencedInstanceSimulationItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.ReferencedInstanceSimulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferencedInstanceSimulationAdapter() {
		if (referencedInstanceSimulationItemProvider == null) {
			referencedInstanceSimulationItemProvider = new ReferencedInstanceSimulationItemProvider(this);
		}

		return referencedInstanceSimulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.opaeum.metamodels.simulation.simulation.StringValueSimulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringValueSimulationItemProvider stringValueSimulationItemProvider;

	/**
	 * This creates an adapter for a {@link org.opaeum.metamodels.simulation.simulation.StringValueSimulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringValueSimulationAdapter() {
		if (stringValueSimulationItemProvider == null) {
			stringValueSimulationItemProvider = new StringValueSimulationItemProvider(this);
		}

		return stringValueSimulationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (valueSimulationItemProvider != null) valueSimulationItemProvider.dispose();
		if (normalDistributionItemProvider != null) normalDistributionItemProvider.dispose();
		if (uniformDistributionItemProvider != null) uniformDistributionItemProvider.dispose();
		if (exponentialDistributionItemProvider != null) exponentialDistributionItemProvider.dispose();
		if (simulatedSlotItemProvider != null) simulatedSlotItemProvider.dispose();
		if (numericValueDistributionItemProvider != null) numericValueDistributionItemProvider.dispose();
		if (enumLiteralSimulationItemProvider != null) enumLiteralSimulationItemProvider.dispose();
		if (containedInstanceValueSimulationItemProvider != null) containedInstanceValueSimulationItemProvider.dispose();
		if (booleanValueSimulationItemProvider != null) booleanValueSimulationItemProvider.dispose();
		if (numberRangeDistributionItemProvider != null) numberRangeDistributionItemProvider.dispose();
		if (referencedInstanceSimulationItemProvider != null) referencedInstanceSimulationItemProvider.dispose();
		if (stringValueSimulationItemProvider != null) stringValueSimulationItemProvider.dispose();
	}

}
