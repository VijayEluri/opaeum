/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.nakeduml.uim.modeleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.nakeduml.uim.util.UimAdapterFactory;
import org.topcased.modeler.providers.ILabelFeatureProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class UimModelerProviderAdapterFactory extends UimAdapterFactory implements ComposeableAdapterFactory,IChangeNotifier,IDisposable{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimField} instances.
	 * 
	 * @generated
	 */
	private UimFieldModelerProvider uimfieldModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimComponent} instances.
	 * 
	 * @generated
	 */
	private UimComponentModelerProvider uimcomponentModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UserInteractionElement} instances.
	 * 
	 * @generated
	 */
	private UserInteractionElementModelerProvider userinteractionelementModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimDataTable} instances.
	 * 
	 * @generated
	 */
	private UimDataTableModelerProvider uimdatatableModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimTabPanel} instances.
	 * 
	 * @generated
	 */
	private UimTabPanelModelerProvider uimtabpanelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimTab} instances.
	 * 
	 * @generated
	 */
	private UimTabModelerProvider uimtabModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimContainer} instances.
	 * 
	 * @generated
	 */
	private UimContainerModelerProvider uimcontainerModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.MasterComponent} instances.
	 * 
	 * @generated
	 */
	private MasterComponentModelerProvider mastercomponentModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UmlReference} instances.
	 * 
	 * @generated
	 */
	private UmlReferenceModelerProvider umlreferenceModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.UimPanel} instances.
	 * 
	 * @generated
	 */
	private UimPanelModelerProvider uimpanelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.ObjectSelectorTree} instances.
	 * 
	 * @generated
	 */
	private ObjectSelectorTreeModelerProvider objectselectortreeModelerProvider;
	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public UimModelerProviderAdapterFactory(){
		supportedTypes.add(ILabelFeatureProvider.class);
	}
	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory(){
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}
	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory){
		this.parentAdapterFactory = parentAdapterFactory;
	}
	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type){
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}
	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier,Object type){
		return super.adapt(notifier, this);
	}
	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object,Object type){
		if(isFactoryForType(type)){
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class) || (((Class) type).isInstance(adapter))){
				return adapter;
			}
		}
		return null;
	}
	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.addListener(notifyChangedListener);
	}
	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.removeListener(notifyChangedListener);
	}
	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification){
		changeNotifier.fireNotifyChanged(notification);
		if(parentAdapterFactory != null){
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimField}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimFieldAdapter(){
		if(uimfieldModelerProvider == null){
			uimfieldModelerProvider = new UimFieldModelerProvider(this);
		}
		return uimfieldModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimComponent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimComponentAdapter(){
		if(uimcomponentModelerProvider == null){
			uimcomponentModelerProvider = new UimComponentModelerProvider(this);
		}
		return uimcomponentModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UserInteractionElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUserInteractionElementAdapter(){
		if(userinteractionelementModelerProvider == null){
			userinteractionelementModelerProvider = new UserInteractionElementModelerProvider(this);
		}
		return userinteractionelementModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimDataTable}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimDataTableAdapter(){
		if(uimdatatableModelerProvider == null){
			uimdatatableModelerProvider = new UimDataTableModelerProvider(this);
		}
		return uimdatatableModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimTabPanel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimTabPanelAdapter(){
		if(uimtabpanelModelerProvider == null){
			uimtabpanelModelerProvider = new UimTabPanelModelerProvider(this);
		}
		return uimtabpanelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimTab}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimTabAdapter(){
		if(uimtabModelerProvider == null){
			uimtabModelerProvider = new UimTabModelerProvider(this);
		}
		return uimtabModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimContainer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimContainerAdapter(){
		if(uimcontainerModelerProvider == null){
			uimcontainerModelerProvider = new UimContainerModelerProvider(this);
		}
		return uimcontainerModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.MasterComponent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMasterComponentAdapter(){
		if(mastercomponentModelerProvider == null){
			mastercomponentModelerProvider = new MasterComponentModelerProvider(this);
		}
		return mastercomponentModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UmlReference}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUmlReferenceAdapter(){
		if(umlreferenceModelerProvider == null){
			umlreferenceModelerProvider = new UmlReferenceModelerProvider(this);
		}
		return umlreferenceModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.UimPanel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimPanelAdapter(){
		if(uimpanelModelerProvider == null){
			uimpanelModelerProvider = new UimPanelModelerProvider(this);
		}
		return uimpanelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.ObjectSelectorTree}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createObjectSelectorTreeAdapter(){
		if(objectselectortreeModelerProvider == null){
			objectselectortreeModelerProvider = new ObjectSelectorTreeModelerProvider(this);
		}
		return objectselectortreeModelerProvider;
	}
	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose(){
		if(uimfieldModelerProvider != null){
			uimfieldModelerProvider.dispose();
		}
		if(uimcomponentModelerProvider != null){
			uimcomponentModelerProvider.dispose();
		}
		if(userinteractionelementModelerProvider != null){
			userinteractionelementModelerProvider.dispose();
		}
		if(uimdatatableModelerProvider != null){
			uimdatatableModelerProvider.dispose();
		}
		if(uimtabpanelModelerProvider != null){
			uimtabpanelModelerProvider.dispose();
		}
		if(uimtabModelerProvider != null){
			uimtabModelerProvider.dispose();
		}
		if(uimcontainerModelerProvider != null){
			uimcontainerModelerProvider.dispose();
		}
		if(mastercomponentModelerProvider != null){
			mastercomponentModelerProvider.dispose();
		}
		if(umlreferenceModelerProvider != null){
			umlreferenceModelerProvider.dispose();
		}
		if(uimpanelModelerProvider != null){
			uimpanelModelerProvider.dispose();
		}
		if(objectselectortreeModelerProvider != null){
			objectselectortreeModelerProvider.dispose();
		}
	}
}
