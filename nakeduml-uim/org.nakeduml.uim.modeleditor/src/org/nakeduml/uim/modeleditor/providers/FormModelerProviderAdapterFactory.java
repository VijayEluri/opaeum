/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.nakeduml.uim.modeleditor.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.nakeduml.uim.form.util.FormAdapterFactory;
import org.topcased.modeler.providers.ILabelFeatureProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class FormModelerProviderAdapterFactory extends FormAdapterFactory implements ComposeableAdapterFactory,IChangeNotifier,IDisposable{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.form.FormPanel} instances.
	 * 
	 * @generated
	 */
	private FormPanelModelerProvider formpanelModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.form.ActionTaskForm} instances.
	 * 
	 * @generated
	 */
	private ActionTaskFormModelerProvider actiontaskformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.form.StateForm} instances.
	 * 
	 * @generated
	 */
	private StateFormModelerProvider stateformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.form.ClassForm} instances.
	 * 
	 * @generated
	 */
	private ClassFormModelerProvider classformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.form.UimForm} instances.
	 * 
	 * @generated
	 */
	private UimFormModelerProvider uimformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.form.OperationTaskForm} instances.
	 * 
	 * @generated
	 */
	private OperationTaskFormModelerProvider operationtaskformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.form.OperationInvocationForm} instances.
	 * 
	 * @generated
	 */
	private OperationInvocationFormModelerProvider operationinvocationformModelerProvider;
	/**
	 * This keeps track of the one adapter used for all {@link org.nakeduml.uim.form.DetailPanel} instances.
	 * 
	 * @generated
	 */
	private DetailPanelModelerProvider detailpanelModelerProvider;
	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public FormModelerProviderAdapterFactory(){
		supportedTypes.add(ILabelFeatureProvider.class);
	}
	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory(){
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}
	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory){
		this.parentAdapterFactory = parentAdapterFactory;
	}
	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type){
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}
	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier,Object type){
		return super.adapt(notifier, this);
	}
	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object,Object type){
		if(isFactoryForType(type)){
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class) || (((Class) type).isInstance(adapter))){
				return adapter;
			}
		}
		return null;
	}
	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.addListener(notifyChangedListener);
	}
	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener){
		changeNotifier.removeListener(notifyChangedListener);
	}
	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification){
		changeNotifier.fireNotifyChanged(notification);
		if(parentAdapterFactory != null){
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.form.FormPanel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createFormPanelAdapter(){
		if(formpanelModelerProvider == null){
			formpanelModelerProvider = new FormPanelModelerProvider(this);
		}
		return formpanelModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.form.ActionTaskForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createActionTaskFormAdapter(){
		if(actiontaskformModelerProvider == null){
			actiontaskformModelerProvider = new ActionTaskFormModelerProvider(this);
		}
		return actiontaskformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.form.StateForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStateFormAdapter(){
		if(stateformModelerProvider == null){
			stateformModelerProvider = new StateFormModelerProvider(this);
		}
		return stateformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.form.ClassForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createClassFormAdapter(){
		if(classformModelerProvider == null){
			classformModelerProvider = new ClassFormModelerProvider(this);
		}
		return classformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.form.UimForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createUimFormAdapter(){
		if(uimformModelerProvider == null){
			uimformModelerProvider = new UimFormModelerProvider(this);
		}
		return uimformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.form.OperationTaskForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationTaskFormAdapter(){
		if(operationtaskformModelerProvider == null){
			operationtaskformModelerProvider = new OperationTaskFormModelerProvider(this);
		}
		return operationtaskformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.form.OperationInvocationForm}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOperationInvocationFormAdapter(){
		if(operationinvocationformModelerProvider == null){
			operationinvocationformModelerProvider = new OperationInvocationFormModelerProvider(this);
		}
		return operationinvocationformModelerProvider;
	}
	/**
	 * This creates an adapter for a {@link org.nakeduml.uim.form.DetailPanel}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDetailPanelAdapter(){
		if(detailpanelModelerProvider == null){
			detailpanelModelerProvider = new DetailPanelModelerProvider(this);
		}
		return detailpanelModelerProvider;
	}
	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose(){
		if(formpanelModelerProvider != null){
			formpanelModelerProvider.dispose();
		}
		if(actiontaskformModelerProvider != null){
			actiontaskformModelerProvider.dispose();
		}
		if(stateformModelerProvider != null){
			stateformModelerProvider.dispose();
		}
		if(classformModelerProvider != null){
			classformModelerProvider.dispose();
		}
		if(uimformModelerProvider != null){
			uimformModelerProvider.dispose();
		}
		if(operationtaskformModelerProvider != null){
			operationtaskformModelerProvider.dispose();
		}
		if(operationinvocationformModelerProvider != null){
			operationinvocationformModelerProvider.dispose();
		}
		if(detailpanelModelerProvider != null){
			detailpanelModelerProvider.dispose();
		}
	}
}
